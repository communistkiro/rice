#!/bin/zsh

# https://github.com/pystardust/ytfzf
emulate -LR zsh;
setopt pipe_fail;

# DEFAULTS
EXTMENU='dmenu -i -l 48';
EXTMENU_LEN=210;
# typeset show_format;

player=mpv;

# DYNAMIC SIZE
format_fzf () {
  dur_len=7
  view_len=10
  date_len=14
  url_len=12

  t_size=$COLUMNS
  if ((t_size < 75)) {
    # title channel
    frac=$(((t_size - 1)/4))
    title_len=$((frac * 3))
    channel_len=$((frac * 1 + 7))
  } elif ((t_size < 95)) {
    # title channel time
    frac=$(((t_size - 4)/8))
    title_len=$((frac * 5 - 1))
    channel_len=$((frac * 2 - 1))
    dur_len=$((frac * 1 + 10))
  } elif ((t_size < 110)) {
    # title channel time views
    frac=$(((t_size - 1)/9))
    title_len=$((frac * 5 ))
    channel_len=$((frac * 2 ))
    dur_len=$((frac * 1))
    view_len=$((frac * 1 + 7))
  } elif ((t_size < 130)) {
    # title channel time views date
    frac=$(((t_size - 5)/11))
    title_len=$((frac * 5 - 1))
    channel_len=$((frac * 2))
    dur_len=$((frac * 1))
    view_len=$((frac * 1))
    date_len=$((frac * 2 + 20))
  } else {   # all
    frac=$(((t_size - 5 - 12)/11))
    title_len=$((frac * 6 - 1))
    channel_len=$((frac * 3/2))
    dur_len=$((frac * 1))
    view_len=$((frac * 1))
    date_len=$((frac * 3/2 ))
  }
}

format_ext_menu () {
  frac=$(((EXTMENU_LEN - 5 - 12)/11))
  title_len=$((frac * 6 - 1))
  channel_len=$((frac * 3/2))
  dur_len=$((frac * 1))
  view_len=$((frac * 1))
  date_len=$((frac * 3/2 ))
  url_len=12
}

helpinfo () {
  printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
  printf '     -h                    Show this help text\n';
  printf '     -m  <search query>    Audio only\n';
  printf '     -f  <search query>    Show available formats before proceeding\n';
  printf '     -p  <search query>    Prints the selected URL\n\n';
  printf 'For more details refer https://github.com/pystardust/ytfzf\n';
}

format_awk () {
  awk -F'\t' \
  -v A=${title_len} -v B=${channel_len} -v C=${dur_len} -v D=${view_len} -v E=${date_len} -v F=${url_len} \
  '{ printf "%-"A"."A"s\t%-"B"."B"s\t%-"C"."C"s\t%-"D"."D"s\t%-"E"."E"s\t%-"F"."F"s\n",$1,$2,$4,$3,$5,$6}'
}
video_menu () {
  format_awk | eval ${prompt_menu}
}

# OPT
while { getopts hmdfp opt } {
  case ${opt} {
    (h) helpinfo; exit;;
    (m) format=bestaudio; unset show_format;;
    (d) typeset d;;
    (f) typeset show_format;;
    (p) [[ -t 0 ]] && typeset p;;
    (*) helpinfo; exit 2;;
  }
}

search_query="${@[OPTIND,-1]}";
[[ -t 0 ]] && {
  prompt_menu='fzf --reverse -i --tabstop=1 --delimiter="$(printf "\t")" --nth=1,2'
  format_fzf
} || {
  # dmenu doesnt render tabs so removing it
  prompt_menu='tr -d "$(printf "\t")" | '${EXTMENU}
  format_ext_menu
}

# MAIN
# [[ -t 0 ]] || search_query=$(${EXTMENU} <<< '')
[[ ! ${search_query} =~ '^\s*$' ]] || { helpinfo ; exit 0 };

yt_fetch=$(
  curl 'https://www.youtube.com/results' -s \
  -G --data-urlencode "search_query=${search_query}" \
  -H 'authority: www.youtube.com' \
  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36' \
  -H 'accept-language: en-US,en;q=0.9' \
  --compressed);

[[ -n ${yt_fetch} ]] || { printf 'ERROR[#01]: Could not curl website. Please check your network and try again.\n'; exit 2 };

yt_json=$(sed -n '/var *ytInitialData/,$p' <<< ${yt_fetch} | tr -d '\n' | sed -E ':a s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;');
[[ -n ${yt_json} ]] || { printf 'ERROR[#02]: Could not find data on site.\n'; exit 2; }

videos_data=$(jq '..|.videoRenderer?' <<< ${yt_json} | sed '/^null$/d' | jq  '.title.runs[0].text,.longBylineText.runs[0].text,.shortViewCountText.simpleText,.lengthText.simpleText,.publishedTimeText.simpleText,.videoId' | sed 's/^"//;s/"$//;s/\\"//g' | sed -E -n ';N;N;N;N;N;s/\n/\t\|/g;p')
[[ -n ${videos_data} ]] || { printf 'No results found. Try different keywords.\n'; exit 1 };

user_selection () {
  selected_data=$(video_menu <<< ${(F)videos_data});
  shorturl=$(sed -E 's_.*\|([^|]+) *$_\1_' <<< ${(F)selected_data});
  [[ -n ${shorturl} ]] || exit;
  url=https://www.youtube.com/watch\?v=${shorturl};
  ! ((${+p})) || { printf '%s\n' ${url}; return };
  # to get back untruncated data
  selected_data=$(printf '%s\n' ${videos_data} | grep -m1 -e ${shorturl});
  ! ((${+show_format})) || format=$(youtube-dl -F ${url} | sed '1,3d' | tac - | eval ${prompt_menu} | sed -E 's/^([^ ]*) .*/\1/')\ --really-quiet;
}

while { true } {
  user_selection || return 0;
  if ((${+p})) {
  } elif ((${+d})) {
    youtube-dl -f best --ignore-errors ${url} &>/dev/null & disown;
  } else { 
    $(${player} ${format:+--ytdl-format=${format}} --really-quiet --pause ${url}) & disown;
  };
};
