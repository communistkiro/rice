# github.com/gokcehan/lf/

# ===================== OPTIONS =====================

set ratios          '1:4:5'
set timefmt         '2006-01-03 15:04:05 '
set color256        on
set dircounts       on
set hidden          on
set smartcase       on
set ignorecase      on
set smartdia        off
set ignoredia       on
set incsearch       on
set preview         on
set reverse         off
set wrapscan        on
set wrapscroll      off
set number          on
set relativenumber  on
set globsearch      on
set tabstop         4
set shell           sh
# set shell           zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to exit on error and option '-u' is used to give error for unset variables. Option '-f' disables pathname expansion which can be useful when $f, $fs, and $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at times.
set shellopts '-eu'
# set shellopts '-eu:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly since default file separator used in these variables (i.e. 'filesep' option) is newline. You need to consider the values of these options and create your commands accordingly.
set ifs "\n"
set filesep "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 1

# ==================== COMMANDS =====================

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to use either file extensions and/or mime types here. Below uses an editor for text files and a file opener for the rest.
cmd open ${{
    # case $(file --mime-type $f -b) in
    #     text*|*ini|*json) subl3 -n $fx;;
    #     *pdf|*djvu|*postscript ) qpdfview --unique $fx;; 
    #     *postscript) gv $fx;;
    #     image*) feh --scale-down $fx;;
    #     *html|*xhtml+xml) firefox --new-tab $fx;;
    #     *epub+zip) epub2txt | less;;
    #     *msword) doc2txt | less;;
    #     *spreadsheet*) gnumeric $fx;;
    #     *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    # esac
    # set -f
    case $f in
        *.gif|*.png|*.jpeg|*.jpg|*.gif|*.tiff|*.pnm|*.tiff|*.bmp) feh --scale-down $fx;;
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.7z|*.tar) als $fx | less; yn 'Unpack?' "aunpack $fx";;
        *.webm|*.mp3|*.mp4|*.mkv|*.m4a|*.m4b|*.wav|*.avi) mpv $fx;;
        *.pdf|*.djvu|*.ps|*.eps) qpdfview --unique $fx;;
        *.eps) gv -- $fx;;
        *.gnumeric|*.ods|*.xls|*.xlsx) gnumeric $fx;;
        *.doc|*.docx) doc2txt $fx | less;;
        *.epub) epub2txt -n $fx | less;;
        *.htm|*.html|*.xhtml) firefox --new-tab $fx;;
        *.exe) wine $fx;;
        *.1|*.2|*.3|*.4|*.5|*.6|*.7|*.8|*.9) man $fx;;
        *.info) info $fx;;
        *) subl3 -n $fx;;
    esac
}}

cmd cock %subl3 -n --command toggle_side_bar $fx


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p /tmp/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx /tmp

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# cmd panes ${{
#     set preview!
#     [ preview ] && set ratios '1:5' || set rations '1:3:4'
# }}


# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd 7z ${{
    set -f
    7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m GODCOCK.7z $fx
}}

cmd rifle ${{
    set -f
    rifle -l $f
    read -p "Open with: " runner
    rifle -p $runner $f
}}

# cmd on-cd &{{
#     # display git repository status in your prompt
#     source /usr/share/git/completion/git-prompt.sh
#     GIT_PS1_SHOWDIRTYSTATE=auto
#     GIT_PS1_SHOWSTASHSTATE=auto
#     GIT_PS1_SHOWUNTRACKEDFILES=auto
#     GIT_PS1_SHOWUPSTREAM=auto
#     git=$(__git_ps1 " (%s)") || true
#     fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w/\033[0m\033[1m%f$git\033[0m"
#     lf -remote "send $id set promptfmt \"$fmt\""
# }}

# show copypaste progress
# cmd paste &{{
#     load=$(lf -remote 'load')
#     mode=$(echo "$load" | sed -n '1p')
#     list=$(echo "$load" | sed '1d')
#     if [ $mode = 'copy' ]; then
#         rsync -av --ignore-existing --progress $list . \
#         | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
#         | while read line; do
#             lf -remote "send $id echo $line"
#         done
#     elif [ $mode = 'move' ]; then
#         mv -n $list .
#     fi
#     lf -remote 'send load'
#     lf -remote 'send clear'
# }}

# hard and soft symlinkage
# cmd Link %{{
#     lf -remote 'load' | while read file; do
#         if [ ! -n "${mode+1}" ]; then
#             mode="$file"
#             continue
#         fi
#         files+=("$file")
#     done
#     if [ "${#files[@]}" -le 1 ]; then
#         lf -remote "send $id echo no files to link"
#         exit 0
#     fi
#     # symbolicly copy mode is indicating a soft link
#     if [[ "$mode" == copy ]]; then
#         /bin/ln -sr $files -t .
#     # while a move mode is indicating a hard link
#     elif [[ "$mode" == move ]]; then
#         /bin/ln $files -t .
#     fi
# }}


# =================== KEYBINDINGS ===================

# UNMAP ALL SHIT KEYBINDINGS
map \"
map \;
map \'
map ,
map /
map 0
map 1
map 8
map <a-b>
map <a-c>
map <a-d>
map <a-f>
map <a-l>
map <a-t>
map <a-u>
map <bs2>
map <bs>
map <c-a>
map <c-b>
map <c-b>
map <c-c>
map <c-d>
map <c-d>
map <c-e>
map <c-f>
map <c-f>
map <c-j>
map <c-k>
map <c-l>
map <c-n>
map <c-p>
map <c-r>
map <c-t>
map <c-u>
map <c-u>
map <c-w>
map <c-y>
map <delete>
map <down>
map <end>
map <end>
map <enter>
map <esc>
map <home>
map <home>
map <left>
map <left>
map <pgdn>
map <pgup>
map <right>
map <right>
map <space>
map <tab>
map <up>
map \?
map c
map d
map f
map F
map G
map gg
map h
map j
map k
map l
map m
map n
map N
map p
map q
map r
map u
map v
map y
map w

# PREFIXES
map \:          read
map \$          shell
map \%          shell-pipe
map \!          shell-wait
map \&          shell-async

# NAVIGATION
map [           up
map \'          down
map \;          updir
map \\          open
map <up>        up
map <down>      down
map <left>      updir
map <right>     open
map <HOME>      top
map <END>       bottom
map <a-[>       half-up
map <a-\'>      half-down
map ]           bottom
map \}          top
#map             page-up
#map             page-down

# ACTIONS
map Q           quit
#map ~           panes
map <c-r>       rifle $fx
map <esc>       cmd-escape
map y           copy
map d           cut
map p           paste
# map P           :Link
map e           find
map f           search
map n           search-next
map N           search-prev
map a           rename
map gh          cd ~
map gp          cd /tmp
map ge          cd /etc
map gu          cd /usr
map cd          push :cd<space>
map E           cock
map i           $$PAGER $f
map l           $$PAGER $f
map <tab>       cmd-complete
map <c-l>       redraw
map r           reload
map <enter>     $$f
map X           !$f
map <space>     toggle
map u           unmark
map x           read 
map w           shell
map S           $$SHELL
map D           push :delete<space>$fx<enter>
map ,           push :glob-select<space>*
map .           push :glob-unselect<space>*
map q           clear
map v           invert
map n           push %mkdir<space>

# OPTS
map R           push :set<space>ratios<space>
map zh          :set hidden!
map zr          :set reverse!
map zn          :set info
map zs          :set info size
map zt          :set info time
map za          :set info size:time
map zp          :set preview!
map sn          :set sortby natural; set info
map ss          :set sortby size; set info size
map st          :set sortby time; set info time
map sa          :set sortby atime; set info atime
map sc          :set sortby ctime; set info ctime
map se          :set sortby ext; set info

# INLINE TRASH
map <a-f>       cmd-word
map <a-b>       cmd-word-back
map <left>      cmd-left
map <right>     cmd-right
map <home>      cmd-home
map <end>       cmd-end
map <bs>        cmd-delete-back
map <bs2>       cmd-dexlete-back
map <delete>    cmd-delete
map <c-u>       cmd-delete-home
map <c-k>       cmd-delete-end
map <c-w>       cmd-delete-unix-word
map <c-y>       cmd-yank
map <c-t>       cmd-transpose
map <c-c>       cmd-interrupt
map <a-c>       cmd-capitalize-word
map <a-d>       cmd-delete-word
map <a-u>       cmd-uppercase-word
map <a-l>       cmd-lowercase-word
# map <a-t>       cmd-transpose-word

# MARKS
map m           mark-save
map `           mark-load
