#!/bin/sh
# github.com/gokcehan/lf/

# ===================== OPTIONS =====================

set ratios          '1:2:6'
set timefmt         '2006-01-03 15:04:05 '
set color256        on
set dircounts       on
set hidden          on
set smartcase       on
set ignorecase      on
set smartdia        off
set ignoredia       on
set incsearch       off
set preview         on
set previewer       '/root/.config/lf/previewer'
# set reverse         off
set wrapscan        on
set wrapscroll      off
set number          on
set relativenumber  on
set globsearch      on
set tabstop         4
# set shell           sh
set shell           zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to exit on error and option '-u' is used to give error for unset variables. Option '-f' disables pathname expansion which can be useful when $f, $fs, and $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at times.
# set shellopts '-eu'
set shellopts '-eu:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly since default file separator used in these variables (i.e. 'filesep' option) is newline. You need to consider the values of these options and create your commands accordingly.
set ifs "\n"
set filesep "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 1

# ==================== COMMANDS =====================

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to use either file extensions and/or mime types here. Below uses an editor for text files and a file opener for the rest.
cmd open ${{
  set -f;
  local a;
  for a in $fx; do
    case $a in
      (*.jpg|*.png|*.gif|*.tiff|*.jpeg|*.GIF|*.TIFF|*.PNG|*.BMP|*.JPEG|*.JPG) feh --scale-down --quiet $a 2>/dev/null &;;
      (*.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.7z|*.tar) als -e $a | less;;
      (*.webm|*.mp3|*.mp4|*.mkv|*.m4a|*.m4b|*.wav|*.avi|*.flac) mpv --no-input-terminal --really-quiet $a &;;
      (*.pdf|*.djvu|*.ps|*.eps) qpdfview --unique --quiet $a 2>/dev/null &;;
      (*.1|*.2|*.3|*.4|*.5|*.6|*.7|*.8|*.9) man -l $a;;
      (*.eps) gv -- $a;;
      (*.gnumeric|*.ods|*.xls|*.xlsx) gnumeric $a &>/dev/null & disown;;
      (*.docx) docx2txt $a - | less;;
      (*.doc) catdoc -m94 $a | less;;
      (*.epub) epub2txt -n $a | less;;
      (*.htm|*.html|*.xhtml) firefox --new-tab $a &>/dev/null & disown;;
      (*.info) info $a;;
      (*.exe) wine $a &>/dev/null & disown;;
    esac;
  done;
}}

cmd sublime %{{
  set -f;
  subl3 -n --command toggle_side_bar $fx;
}}

cmd rndrename ${{
  set -f;
  local a s d;
  for a in $fx; do
    d=${a#*.};
    if [ $d = $a ]; then
      while true; do
        s=$(cat /dev/random | tr -cd 'a-f0-9' | head -c 32);
        [ ! -f $s ] && break;
      done;
      mv $a $s;
    else;
      while true; do
        s=$(cat /dev/random | tr -cd 'a-f0-9' | head -c 32);
        [ ! -f $s.$d ] && break;
      done;
      mv $a $s.$d;
    fi
  done
}}

# make sure trash folder exists
# %mkdir -p /tmp/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx /tmp

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

cmd mkdir ${{
  if [ $# -gt 0 ]; then
    d="$(printf '%s ' $@)";
    mkdir -p ${d%?};
  else
    mktemp -d tmp.XXXXXXXXXX;
  fi
}}

cmd fzf ${{
  fzf \
    --algo=v1 \
    -m \
    --bind "alt-e:execute(subl3 -n --command toggle_side_bar -a {+})" \
    --bind "alt-r:execute(mle {+})" \
    --bind "alt-f:clear-selection" \
    --bind "alt-v:select-all";
}}

cmd 7za ${{
  set -f
  [ $# -gt 0 ] && d="$(printf '%s ' $@)" || return 1;
  [ -e ${d%?} ] && return 1;
  7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m ${d%?}.7z $fx;
  unset d;
}}

cmd extract ${{
  set -f
  aunpack -e $fx
}}

# cmd rifle ${{
#   set -f
#   rifle -l $f
#   # read -p "Open with: " runner
#   read runner\?"Open with: "
#   rifle -p $runner $f
# }}

cmd fzfcd ${{
  local s="$(ls -Ap | pcre2grep '/$' | fzy -l 50)"
  # local s="$(fd -uu -i -t d -ed 1 | fzy -l 50)"
  [ -d $s ] && lf -remote "send $id cd \"$s\"" || break
}}

cmd Link %{{
  lf -remote 'load' | while read file; do
    if [ ! -n "${mode+1}" ]; then
      mode="$file"
      continue
    fi
    files+=("$file")
  done
  if [ "${#files[@]}" -le 1 ]; then
    lf -remote "send $id echo no files to link"
    exit 0
  fi
  # symbolicly copy mode is indicating a soft link
  if [[ "$mode" == copy ]]; then
    ln -sr $files -t .
  # while a move mode is indicating a hard link
  elif [[ "$mode" == move ]]; then
    ln $files -t .
  fi
}}

cmd cut-add %{{
  files=$(lf -remote load | tail -n +2)
  newline=$'\n'

  # change to $fx to add current file when no toggled files exist.
  if [ -n "$files" ]; then
    new_files=$(echo "$files${newline}$fx" | sort | uniq)
  else
    new_files=$fx
  fi
  # remove empty lines from the file list, because they keep messing up the selection.
  new_files=$(echo "$new_files" | sed --quiet -e '/^$/d' -e 'p')

  lf -remote "save${newline}move${newline}${new_files}${newline}"
  lf -remote "send $id unselect${newline}send $id sync"
}}

cmd copy-add %{{
  files=$(lf -remote load | tail -n +2)
  newline=$'\n'

  # change to $fx to add current file when no toggled files exist.
  if [ -n "$files" ]; then
    new_files=$(echo "$files${newline}$fx" | sort | uniq)
  else
    new_files=$fx
  fi
  # remove empty lines from the file list, because they keep messing up the selection.
  new_files=$(echo "$new_files" | sed --quiet -e '/^$/d' -e 'p')

  lf -remote "save${newline}copy${newline}${new_files}${newline}"
  lf -remote "send $id unselect${newline}send $id sync"
}}

cmd cut-remove %{{
  files=$(lf -remote load)
  operation=$(echo "$files" | head -n1)

  if [ "$operation" != "move" ]; then
    lf -remote "send $id echoerr no files in cut list."
    exit 1
  fi

  files=$(echo "$files" | tail -n +2)
  newline=$'\n'

  # change to $fx to remove current file when no toggled files exist.
  if [ -n "$files" ]; then
    # here we want all files in $files that aren't in $fs, making sure that none of the entries in $fs are included, even when they aren't in $files. To do this we concatenate $files and $fs (twice), printing only the uniqe lines.
    new_files=$(echo "$files$newline$fx$newline$fx" | sort | uniq -u)
  else
    new_files=$files
  fi
  new_files=$(echo "$new_files" | sed --quiet -e '/^$/d' -e 'p')

  lf -remote "save${newline}move${newline}${new_files}${newline}"
  lf -remote "send $id unselect${newline}send $id sync"
}}

cmd copy-remove %{{
  files=$(lf -remote load)
  operation=$(echo "$files" | head -n1)

  if [ "$operation" != "move" ]; then
    lf -remote "send $id echoerr no files in cut list."
    exit 1
  fi

  files=$(echo "$files" | tail -n +2)
  newline=$'\n'

  # change to $fx to remove current file when no toggled files exist.
  if [ -n "$files" ]; then
    # here we want all files in $files that aren't in $fs, making sure that none of the entries in $fs are included, even when they aren't in $files. To do this we concatenate $files and $fs (twice), printing only the uniqe lines.
    new_files=$(echo "$files$newline$fx$newline$fx" | sort | uniq -u)
  else
    new_files=$files
  fi
  new_files=$(echo "$new_files" | sed --quiet -e '/^$/d' -e 'p')

  lf -remote "save${newline}copy${newline}${new_files}${newline}"
  lf -remote "send $id unselect${newline}send $id sync"
}}

cmd pageme ${{
  set -f
  chroma -s monokai -- $fx | $PAGER;
}}


# =================== KEYBINDINGS ===================

# UNMAP ALL SHIT KEYBINDINGS
map ,
map /
map 0
map 1
map 8
map <a-b>
map <a-c>
map <a-d>
map <a-f>
map <a-l>
map <a-t>
map <a-u>
map <bs2>
map <bs>
map <c-a>
map <c-b>
map <c-c>
map <c-d>
map <c-e>
map <c-f>
map <c-j>
map <c-k>
map <c-l>
map <c-n>
map <c-p>
map <c-r>
map <c-t>
map <c-u>
map <c-w>
map <c-y>
map <delete>
map <down>
map <end>
map <enter>
map <esc>
map <home>
map <left>
map <pgdn>
map <pgup>
map <right>
map <space>
map <tab>
map <up>
map \"
map \'
map \;
map \?
map c
map d
map f
map F
map G
map gg
map h
map j
map k
map l
map m
map n
map N
map p
map q
map r
map u
map v
map w
map y

# PREFIXES
map \:          read
map <enter>     shell
map \%          shell-pipe
map \!          shell-wait
map \&          shell-async

# NAVIGATION
map [           up
map \'          down
map \;          updir
map \\          open
map <up>        up
map <down>      down
map <left>      updir
map <right>     open
map <HOME>      top
map <END>       bottom
map <a-[>       half-up
map <a-\'>      half-down
map ]           bottom
map \}          top

# ACTIONS
map Q           quit
# map r           rifle $fx
map @           push :<space>$fx
map <esc>       cmd-escape
map yy          copy
map ya          copy-add
map yr          copy-remove
map yp          push $realpath<space>$fx<space>|<space>xclip<space>-sel<space>clip<enter>
map yd          push $realpath<space>$fx<space>|<space>xargs<space>--delimiter='\n'<space>dirname<space>|<space>xclip<space>-sel<space>clip<enter>
map dd          cut
map da          cut-add
map dr          cut-remove
map p           paste; reload
map P           :Link
map f           fzf
map n           search-next
map N           search-prev
map a           rename
map A           rndrename
map gh          cd ~
map gp          cd /tmp
map c           push :cd<space>
# map e           find
map e           fzfcd
map E           sublime
# map l           $$PAGER $fx
map l           pageme
map <tab>       cmd-complete
map <c-l>       redraw
map <c-l>       reload
map R           redraw
map R           reload
map <enter>     $$f
# map X           !$f
map <space>     toggle
map q           unselect
# map q           clear
map x           read 
map S           $$SHELL
map D           push :delete<space>$fx<enter>
map ,           push :glob-select<space>*
map '<'         push :glob-unselect<space>*
map v           invert
map n           push :mkdir<space>
map Z           push :7za<space>
map X           push :extract<space>$fx<enter>

# OPTS
map \~          push :set<space>ratios<space>
map zh          :set hidden!
map zr          :set reverse!
map zn          :set info
map zs          :set info size
map zt          :set info time
map za          :set info size:time
map zp          :set preview!
map zx          :set nopreview; set ratios '1:8'
map zz          :set preview; set ratios '1:2:6'
map sn          :set sortby natural; set info
map ss          :set sortby size; set info size
map st          :set sortby time; set info time
map sa          :set sortby atime; set info atime
map sc          :set sortby ctime; set info ctime
map se          :set sortby ext; set info

# INLINE TRASH
map <a-f>       cmd-word
map <a-b>       cmd-word-back
map <left>      cmd-left
map <right>     cmd-right
map <home>      cmd-home
map <end>       cmd-end
map <bs>        cmd-delete-back
map <bs2>       cmd-dexlete-back
map <delete>    cmd-delete
map <c-u>       cmd-delete-home
map <c-k>       cmd-delete-end
map <c-w>       cmd-delete-unix-word
map <c-y>       cmd-yank
map <c-t>       cmd-transpose
map <c-c>       cmd-interrupt
map <a-c>       cmd-capitalize-word
map <a-d>       cmd-delete-word
map <a-u>       cmd-uppercase-word
map <a-l>       cmd-lowercase-word
# map <a-t>       cmd-transpose-word

# MARKS
map M           mark-save
map `           mark-load
