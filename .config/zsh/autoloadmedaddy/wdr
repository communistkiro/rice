#!/bin/zsh
function wdr() {
# https://openweathermap.org/api/
local c=0; local d=0; local lon lat api_call weather o f a location;

while getopts 'cdl:h' o; do case $o in
(c) c=1;;
(d) d=1;;
(l) location=${OPTARG};;
(h) ;&
(*) echo "Usage: $0 [-c (current only)] [-d (descriptions only)] [-l location]" 1>&2; return 1;;
esac; done;

if which curl &>/dev/null; then
  alias fetch='curl -sf';
elif which wget &>/dev/null; then
  alias fetch='wget -qO -';
fi
[[ -z $location ]] && location=Sofia,Bulgaria;
location=$(sed 's/ /%20/g' <<< ${location});
api_key=85a4e3c55b73909f42c6a23ec35b7147;

api_call=weather;
weather=$(fetch "api.openweathermap.org/data/2.5/${api_call}?q=${location}&appid=${api_key}&units=metric") || (echo 'Sum Ting Wong!'; return 22);

if [[ -z ${weather} ]]; then 
  print "ERROR: Cannot fetch weather data"; return 69; 
                                                    # elif [[ $(jq -r '.cod' <<< ${weather} 2>/dev/null) != 200 ]; then 
  print "ERROR: Cannot fetch weather data for the given location"; return 75;
fi;

figlet Weather for ${location};

if ((c > d)); then
  jq -r . <<< ${weather}; return 0;
elif ((c == d)) && (($c == 1)); then
  jq -r '.weather[].description' <<< ${weather} | column ; return 0;
fi;

lat=$(jq -r '.coord.lat' <<< ${weather});
lon=$(jq -r '.coord.lon' <<< ${weather});

api_call=onecall;
weather="$(fetch "api.openweathermap.org/data/2.5/${api_call}?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric")" || return 22;

if ((d == 1)); then
  d=(${(@f)"$(jq -r '.hourly[].weather[].description' <<< ${weather})"});
  f=(${(@f)"$(jq -r '.hourly[].dt' <<< ${weather} | awk '{print strftime("%H:%M",$1)}')"});
  a=(${(@F)$(seq 24)}); s=(${(@F)$(seq 48)}); s[1,24]=(); z=(${a:^s}); unset a s;
  for s in $z; do; a[++i]=${f[s]}" "${g[s]}" "${d[s]}; done; unset d;
  printf "%-28s%-28s\n" "Today" "Tomorrow" ${(@)a};
  return 0;
fi;

mkdir -p /tmp/wdr; cd /tmp/wdr;
# 48 HOUR FORECAST
jq -r '.hourly[].dt'         <<< ${weather} > dt48h;
jq -r '.hourly[].temp'       <<< ${weather} > temp48h;
jq -r '.hourly[].feels_like' <<< ${weather} > feels_like48h;
jq -r '.hourly[].pressure'   <<< ${weather} > pressure48h;
jq -r '.hourly[].humidity'   <<< ${weather} > humidity48h;
jq -r '.hourly[].dew_point'  <<< ${weather} > dew_point48h;
jq -r '.hourly[].clouds'     <<< ${weather} > clouds48h;
jq -r '.hourly[].wind_speed' <<< ${weather} > wind_speed48h;
jq -r '.hourly[].wind_deg'   <<< ${weather} > wind_deg48h;
jq '.hourly[].rain | walk (if type == "null" then 0 else . end)' <<< ${weather} | sed -r '/\{|\}/d; s/ +"1h": //' > rain48h;
jq '.hourly[].snow | walk (if type == "null" then 0 else . end)' <<< ${weather} | sed -r '/\{|\}/d; s/ +"1h": //' > snow48h;

# 7 DAY FORECAST
jq -r '.daily[].temp.min'         <<< ${weather} > min7d;
jq -r '.daily[].temp.max'         <<< ${weather} > max7d;

jq -r '.daily[].temp.day'         <<< ${weather} > day7d;
jq -r '.daily[].temp.night'       <<< ${weather} > night7d;
jq -r '.daily[].temp.eve'         <<< ${weather} > eve7d;
jq -r '.daily[].temp.morn'        <<< ${weather} > morn7d;

jq -r '.daily[].feels_like.day'   <<< ${weather} > flday7d;
jq -r '.daily[].feels_like.night' <<< ${weather} > flnight7d;
jq -r '.daily[].feels_like.eve'   <<< ${weather} > fleve7d;
jq -r '.daily[].feels_like.morn'  <<< ${weather} > flmorn7d;

jq -r '.daily[].pressure'         <<< ${weather} > pressure7d;
jq -r '.daily[].humidity'         <<< ${weather} > humidity7d;
jq -r '.daily[].clouds'           <<< ${weather} > clouds7d;
jq -r '.daily[].dew_point'        <<< ${weather} > dew_point7d;
jq -r '.daily[].wind_deg'         <<< ${weather} > wind_deg7d;
jq -r '.daily[].wind_speed'       <<< ${weather} > wind_speed7d;
jq -r '.daily[].rain | walk (if type == "null" then 0 else . end)' <<< ${weather} > rain7d;
jq -r '.daily[].snow | walk (if type == "null" then 0 else . end)' <<< ${weather} > snow7d;



octave-cli --persist ~/.config/zsh/other/wdr.m;
# cd ~; rm -r ${tmp};
cd ~; rm -r /tmp/wdr;
unalias fetch;
}