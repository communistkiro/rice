#!/bin/zsh
# DOWNLOADS FROM LIST OR, GIVEN A NEW LINK, SCRAPES ALBA FROM EMBEDDED PLAYER AND DIRECT LINKS RELEASES TO LIST
function xrp () {
while getopts '' o; do case $o in *) 
less <<HEREDOC
NAME
    xrp - download, tag, and structure alba from list of links.

SYNOPSIS
    xrp
    xrp [website(s)]

DESCRIPTION
    Downloads .mp3s (can be modified to 'bestaudio', but 128k .mp3 is the standard free for-
    mat), naming them in format 'ARITST [ALBUM #TRACK (RELEASEDATE)] TITLE', and embedding 
    album/track art, puts these files in a directory in the format 'ARITST [ALBUM (RELEASE-
    DATE)]', calls 'tagme' (which then tags them with their respective artist (track-wise), 
    albumartist, album, release date (as state in the bandcamp page), genre (camelcases 
    listed tags in bandcamp page), and track number), puts this directory in a parent direc-
    tory in the format 'ARTIST', removes the processed link and adds it to the list of down-
    loaded alba/tracks. If the album is yet to be released, the link gets added to the list 
    of future releases; if the album is missing some tracks, the link is added to a list of 
    alba missing tracks. Optional argument of website can be added to bypass the scraping 
    step with xrpp.

EXAMPLES
    xrp
        Do everything as per description, with your current newlinks files.

    xrp https://canthisevenbecalledmusic.com/monthly-recommendations-january-2020
        Scrape the website, then do everything as per description with possibly newly ac-
        quired links.
        
BUGS
    Please report any aberrant behavior or bugs to vlg@tutamail.com


HEREDOC
return 1;;esac; done;

if [ $# -gt 0 ]; then; xrpp $@; fi;
cd ~/nm;
while IFS= read -r a; do;
    t1=$(mktemp /tmp/XXXXXX); t2=$(mktemp /tmp/XXXXXX); t3=$(mktemp /tmp/XXXXXX);
    curl ${a} > $t1;
    grep -q 'redirected' $t1 && echo ${a} >> ~/nm/redir && /bin/sed -i '1,1d' ~/nm/newlinks && break;
    sed -n '15,/">/p' $t1 > $t2;
    grep 'class="tag"' $t1 | /bin/grep -Po 'tag/[a-z-]+' | cut -c 5- | sed -r 's/(^|-)([a-z])/\U\0/g; s/-/ /g' | awk -vRS='\n' -vORS=';' '1' > /tmp/x;

    if /bin/grep -s 'releases' $t2; then
        echo ${a} >> ~/nm/soon;
        sort -uo ~/nm/soon ~/nm/soon;
    else
        youtube-dl \
            --ignore-config \
            --ignore-errors \
            --retries 64 \
            --fragment-retries 256 \
            --format mp3 \
            --embed-thumbnail \
            --output '~/nm/%(artist)s [%(album)s #%(track_number)s (%(upload_date)s)] %(track)s.%(ext)s' ${a};
        if ! w=(${(@f)"$(ls *mp3)"}); then
            echo ${a} >> ~/nm/missing;
            sort -uo ~/nm/missing ~/nm/missing;
        else
            if [ $(sed -rn '/^[1-9]+\.\ /p' $t2 | tail -1 | /bin/grep -Po '^\d+') -gt ${#w} ]; then
                echo ${a} >> ~/nm/missing;
                sort -uo ~/nm/missing ~/nm/missing;
            fi;
            printf "%s\n" ${(@)w} | /bin/grep -Po '^.*\(\d{8}\)]' | sed -r 's/( #[0-9NA]+)( \([0-9]{4})([0-9]{2})([0-9]{2}\)\])/\2-\3-\4/' > $t3;
            # FIXME figure out when v.a., feat., etc. -> TPE2
            while IFS= read -r s; do;
                mkdir -p ${s};
                /bin/mv ${(@)w} ${s};
                tagme ${s};
                for b in ${(@f)"$(find "${s}" -name '*.bak')"}; do rm -f "$b"; done;
                mkdir -p ${s%% \[*}; /bin/mv ${s} ${s%% \[*};
                break;
            done < $t3 | sort -u;
        fi;
        echo ${a} >> ~/nm/oldlinks && sort -uo ~/nm/oldlinks ~/nm/oldlinks;
        echo "\n\n";
    fi;
    /bin/sed -i '1,1d' ~/nm/newlinks;
    rm -f $t1 $t2 $t3;
done < ~/nm/newlinks;
}