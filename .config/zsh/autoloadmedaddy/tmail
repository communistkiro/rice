#!/bin/zsh
# temporary mail
# deps: pcre2grep, zsh, fzy, rdrview
typeset dir api c;
api='https://www.1secmail.com/api/v1/'; dir=/tmp/tmpmail; mkdir -p $dir; touch $dir/emailaddresses;

function menu () {
  typeset m t a;
  while getopts 'm:t:' a; do case $a in
  (m) 
    m="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
    [[ $OPTARG =~ i ]] && m="${m};7";
    [[ $OPTARG =~ b ]] && m="${m};1";
    m="${m}m";;
  (t)
    t="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
    [[ $OPTARG =~ i ]] && t="${t};7";
    [[ $OPTARG =~ b ]] && t="${t};1";
    t="${t}m";;
  esac; done;
  for a in $@[OPTIND,-1]; do printf '%b%4s    %b%s%b\n' "${m:-\033];0m}" "${a%% *}" "${t:-\033[;0m}" "${a#* }" '\033[;0m'; done;
}

#!/bin/zsh
function box () {
  ((# == 0)) && return 0;
  local a d h B T H tl tr bl br th bh lv rv r w; integer s; s=1;
  while getopts 's:h:B:T:H:' a; do case $a in
    (s) # line style
      ((OPTARG >= 1 && OPTARG < 5)) && s=$OPTARG;;
    (h) # header
      h=$OPTARG;;
    (B) # box color
      B="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
      [[ $OPTARG =~ i ]] && B="${B};7";
      [[ $OPTARG =~ b ]] && B="${B};1";
      B="${B}m";;
    (T) # text color
      T="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
      [[ $OPTARG =~ i ]] && T="${T};7";
      [[ $OPTARG =~ b ]] && T="${T};1";
      T="${T}m";;
    (H) # header color
      H="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
      [[ $OPTARG =~ i ]] && H="${H};7";
      [[ $OPTARG =~ b ]] && H="${H};1";
      H="${H}m";;
  esac; done;

  tl=(┏ ┌ ╔ ⡏); tl=${tl[$s]}; # top left
  bl=(┗ └ ╚ ⣇); bl=${bl[$s]}; # bottom left
  tr=(┓ ┐ ╗ ⢹); tr=${tr[$s]}; # top right
  br=(┛ ┘ ╝ ⣸); br=${br[$s]}; # bottom right
  th=(━ ─ ═ ⠉); th=${th[$s]}; # top horizontal
  bh=(━ ─ ═ ⣀); bh=${bh[$s]}; # bottom horizontal
  lv=(┃ │ ║ ⡇); lv=${lv[$s]}; # left vertical
  rv=(┃ │ ║ ⢸); rv=${rv[$s]}; # right vertical
  r='\033[;0m';
  # box inside width
  w=0; for a in $@[OPTIND,-1]; do ((${(c)#a} > w)) && w=${(c)#a}; done; 
  ((${+h:+1} && $#h > w)) && w=$#h && ((w+=2)); ((w+=2));

  if ((w + 2 > COLUMNS)); then
    ((${+h:+1})) && printf '%b%s%s%b%s%b%s%s\n' $B $tl ${(pr.(COLUMNS-2-$#h)/2..$th.)th} $r$H $h $r$B ${(pr.(COLUMNS-2-$#h)/2+$#h+COLUMNS-2-($#h+COLUMNS-2)/2*2..$th.)th} $tr || printf '%b%s%s%s\n' $B $tl ${(pr.COLUMNS-3..$th.)th} $tr;
    for a in $@[OPTIND,-1]; do 
      for d in ${(f)"$(fmt -w $COLUMNS <<< $a)"}; do
        printf '%s %b%s%b %s\n' $lv $r$T ${(r.COLUMNS-4.. .)d} $r$B $rv; 
      done;
    done;
    printf '%s%s%s%b\n' $bl ${(pr.COLUMNS-2..$bh.)bh} $br $r;
  else;
    ((${+h:+1})) && printf '%b%s%s%b%s%b%s%s\n' $B $tl ${(pr.(w-$#h)/2..$th.)th} $r$H $h $r$B ${(pr.(w-$#h)/2+$#h+w-($#h+w)/2*2..$th.)th} $tr || printf '%b%s%s%s\n' $B $tl ${(pr.w-1..$th.)th} $tr;
    for a in $@[OPTIND,-1]; do printf '%s %b%s%b %s\n' $lv $r$T ${(r.w-2.. .)a} $r$B $rv; done;
    printf '%s%s%s%b\n' $bl ${(pr.w..$bh.)bh} $br $r;
  fi;
}

function fetchEmail () { # List all the received emails in a nicely formatted order
  curl -s -f -L --max-redirs 0 -H 'User-Agent:' -o $a "${api}?action=getMessages&login=${userName}&domain=${domainName}";
 
  emailLength=$(jq length $a);
  ((emailLength == 0)) && read -k1 '?No (new) mail.' && return 1;

  emailNumber=#;          emailNumber+=($(seq -w $emailLength));
  emailId=ID;             emailId+=(${(f)"$(jq -r '.[].id' $a)"});
  emailFrom=From;         emailFrom+=(${(f)"$(jq -r '.[].from' $a)"});
  emailSubject=Subject;   emailSubject+=(${(f)"$(jq -r '.[].subject' $a)"});
  emailTime=Time;         emailTime+=(${(f)"$(jq -r '.[].date' $a)"});
}

function viewEmail () { # View an email by ID
  typeset b;
  [[ -f ${dir}/${userName}${domainName}${1} ]] || curl -s -f -L --max-redirs 0 -H 'User-Agent:' -o ${dir}/${userName}${domainName}${1} "${api}?action=readMessage&login=${userName}&domain=${domainName}&id=${1}";
  [[ $(< ${dir}/${userName}${domainName}${1}) = "Message not found" ]] && read -k1 '?Message not found.' && return;

  # b=$(jq -r '.htmlBody' ${dir}/${userName}${domainName}${1});

  # printf '%b\n' \
  #   "\033[;30;0m To:\033[;36;1m ${(l.8...)}${userName}@1secmail.${domainName}\033[;0m" \
  #   "\033[;32;0m From:\033[;32;1m ${(l.6...)}$(jq -r '.from' ${dir}/${userName}${domainName}${1})\033[;0m" \
  #   "\033[;34;0m Subject:\033[;34;1 ${(l.5...)}$(jq -r '.subject' ${dir}/${userName}${domainName}${1})\033[;0m" \
  #   "${b:-$(jq -r '.textBody' ${dir}/${userName}${domainName}${1})}" | less;

  [[ -f ${dir}/${userName}${domainName}${1}.html ]] || {
    printf '%s\n' \
      "<pre><b>To: </b>${userName}@1secmail.${domainName}" \
      "<b>From: </b>$(jq -r '.from' ${dir}/${userName}${domainName}${1})" \
      "<b>Subject: </b>$(jq -r '.subject' ${dir}/${userName}${domainName}${1})</pre>" \
      "${$(jq -r '.htmlBody' ${dir}/${userName}${domainName}${1}):-<pre>$(jq -r '.textBody' ${dir}/${userName}${domainName}${1})</pre>}" > ${dir}/${userName}${domainName}${1}.html;
  };
  rdrview -B 'elinks -dump' ${dir}/${userName}${domainName}${1}.html | less;
}

function generateAddress () { # generate random email address
  typeset domains;
  domains=(1secmail.com 1secmail.net 1secmail.org wwjmp.com);
  domainName=${domains[(RANDOM % 4 + 1)]};
  userName=$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c $((RANDOM % 16 + 17)) | tr '[:upper:]' '[:lower:]');
}

function customAddress () {
  typeset customName;
  [[ $customName =~ [a-z0-9]+ ]] && userName=${customName} || read -k1 '?Invalid username.' && return 1;
  read 'customName?Custom address [a-z0-9]: ';
  printf 'Domain name: ' ' [*]  1secmail.com' ' [2]  1secmail.net' ' [3]  1secmail.org' ' [4]  wwjmp.com' '';
  case $(read -sek1 '?') in
    (2) domainName=1secmail.net;;
    (3) domainName=1secmail.org;;
    (4) domainName=wwjmp.com;;
    (*) domainName=1secmail.com;;
  esac;
}

function setAddress () { # saves current address for later use
  if [[ ! -z $userName ]] && [ ! -z $domainName ]]; then
    pcre2grep -q "^${userName}@${domainName}$" $dir/emailaddresses && \
    read -k1 '?Already in set email addresses.' || \
    printf '%s\n' "${userName}@${domainName}" >> $dir/emailaddresses;
  else 
    read -k1 '?No email address.';
  fi;
}

function pickAddress () { # select one of previously set addresses
  (($(wc -l < $dir/emailaddresses) == 0)) && return;
  typeset s;
  s=$(fzy -l $LINES < $dir/emailaddresses) || return;
  userName=${s%@*};
  domainName=${s#*@};
}

function () {
  typeset a c s emailLength emailNumber emailId emailFrom emailSubject emailTime userName domainName;
  a=$(mktemp $dir/XXXXXXXX);
  while true; do
    clear;
    box -H i5 -B 4b -T 2 -h "${userName}@${domainName}" ${(f)"$(for s in {1..$((emailLength+1))}; do printf '%s&&%s&&%s&&%s&&%s\n' ${emailNumber[s]:-\#} ${emailTime[s]:-Time} ${emailId[s]:-ID} ${emailFrom[s]:-From} ${emailSubject[s]:-Subject}; done | column -t -s '&&')"};
    menu -t 6b -m 2b \
      'g (re)generate address' \
      's save current' \
      'r refresh inbox' \
      'R fetch and view most recent' \
      'y copy address to clipboard' \
      'c pick from previously set' \
      'C custom address' \
      '# view email #_' \
      'q quit';
    read -sk1 'c?Select action: ';
    case $c in
      (g) generateAddress;;
      (s) setAddress;;
      (r) fetchEmail;;
      (R) fetchEmail && viewEmail $emailId[1+1];;
      (y) printf '%s' ${userName}@${domainName} | xclip -selection clipboard;;
      (c) pickAddress; fetchEmail;;
      (C) customAddress;;
      (0) ((c += 10));&
      ([0-9]) ((c > ${emailLength:-0})) && read -k1 '?Invalid email number.' || viewEmail $emailId[c+1];;
      # ([1-9]) viewEmail $emailId[c+1];;
      # (0) viewEmail $emailId[c+11];;
      (q) rm $a; break;;
    esac;
  done;
}

# box -H i5 -B 4b -T 2 -h "${userName}@${domainName}" ${(f)"$(pr --omit-header --columns=5 <<< ${(F)emailNumber[s]:-\#} <<< ${(F)emailTime[s]:-Time} <<< ${(F)emailId[s]:-ID} <<< ${(F)emailFrom[s]:-From} <<< ${(F)emailSubject[s]:-Subject}"} \ # equal width columns..