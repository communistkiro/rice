#!/bin/zsh
box () {
  typeset a h B T H tl tr bl br th bh lv rv w; 
  typeset -i s;
  s=1;
  B='\033[0;';
  T='\033[0;';
  H='\033[0;';
  while { getopts 's:h:B:T:H:' a } { case $a {
    (s) # line style
      ((OPTARG >= 1 && OPTARG < 5)) && s=$OPTARG;;
    (h) # header
      h=${OPTARG};;
    (B) # box color
      B+=${${${${OPTARG//[^0-7iIbB]/}//(#m)[0-7]/3${MATCH};}//[iI]/7;}//[bB]/1;};;
    (T) # text color
      T+=${${${${OPTARG//[^0-7iIbB]/}//(#m)[0-7]/3${MATCH};}//[iI]/7;}//[bB]/1;};;
    (H) # header color
      H+=${${${${OPTARG//[^0-7iIbB]/}//(#m)[0-7]/3${MATCH};}//[iI]/7;}//[bB]/1;};;
  (*) less -F << HEREDOC # help wanted.
NAME
  box - enclose strings in box

SYNOPSIS
  box [-s 1--4] [-B [0-7][i|I][b|B]] [-T [0-7][i|I][b|B]] [-H [0-7][i|I][b|B]] [-h header <string>] [string(s)]

DESCRIPTION
  box is a zsh script that encloses one or more strings, extending to 4 above the lengthiest 
  string, header included. The box's style is given by '-s', and may be thick, thin, double, 
  or dotted; may have a title; and may color the box's line, text, and header in different 
  colors according to ANSI C escape codes. The color is a 1--3-character sequence of a number 
  0--7, 'b|B' for bold color, and 'i|I' to switch fore- and background colors. The number 
  corresponds to the colors black, red, green, yellow, blue, magenta, cyan, and white, as 
  defined for your terminal emulator. Defaults to thick lines and white for box, text, and 
  header.

EXAMPLES
    box -h header 'This is a sentence on the first row' 'This is a second row'

    a=Zz; box -s 3 -T 3b -B b2 -H 5i -h 'looooooooooooooooong snooze' ${(pr.16..$a.l.8...)a} "padding works, too"

HEREDOC
  return 1;;
  }; };

  ((# + 1 > OPTIND)) || return 0;

  B=${B%?}m;
  T=${T%?}m;
  H=${H%?}m;

  tl=${$(<<<'┏ ┌ ╔ ⡏')[s]}; # top left
  bl=${$(<<<'┗ └ ╚ ⣇')[s]}; # bottom left
  tr=${$(<<<'┓ ┐ ╗ ⢹')[s]}; # top right
  br=${$(<<<'┛ ┘ ╝ ⣸')[s]}; # bottom right
  th=${$(<<<'━ ─ ═ ⠉')[s]}; # top horizontal
  bh=${$(<<<'━ ─ ═ ⣀')[s]}; # bottom horizontal
  lv=${$(<<<'┃ │ ║ ⡇')[s]}; # left vertical
  rv=${$(<<<'┃ │ ║ ⢸')[s]}; # right vertical

  w=${${(On)@[OPTIND,-1]//(#m)*/${#MATCH}}[1]}; # box inside width
  (($+h)) && (($#h > w)) && w=$(($#h + 4)) || ((w += 2));

  if ((w + 2 > COLUMNS)) {
    # FIXME; IF HEADER MULTI ROW OR LONGER THAN COLUMNS ... ELSE
    (($+h)) && printf '%b\n' $B$tl${(pr.(COLUMNS-2-$#h)/2+1..$th.)}$H$h$B${(pr.(COLUMNS-2-$#h)/2+$#h+COLUMNS-2-($#h+COLUMNS-2)/2*2..$th.)}$tr;
    printf '%b\n' $B$tl${(pr.COLUMNS-3..$th.)}$tr;
    printf '%b\n' ${(r.2.)lv}$T${(r.COLUMNS-4.)^${(f)@[OPTIND,-1]}}$B${(l.2.)rv};
    printf '%b\n' $bl${(pr.COLUMNS-2..$bh.)}$br'\033[0m';
  } else {
    (($+h)) &&
    printf '%b\n' $B$tl${(pr.(w-$#h)/2..$th.)}$H$h$B${(pr.(w-$#h)/2+$#h+w-($#h+w)/2*2..$th.)}$tr ||
    printf '%b\n' $B$tl${(pr.w-1..$th.)}$tr;
    printf '%b\n' ${(r.2.)lv}$T${(r.w-2.)^@[OPTIND,-1]}$B${(l.2.)rv};
    printf '%b\n' $bl${(pr.w..$bh.)}$br'\033[0m';
  };
}
