#!/bin/zsh
[[ -t 0 ]] || return 1;
# { which xdccget && which pcre2grep } &>/dev/null || return 2;
ping -c 1 1.1.1.1 &>/dev/null || return 3;
trap "cd ~; rm -rf ${tmp} ${bots}; return 0;" QUIT HUP;
emulate -LR zsh;
setopt ksh_glob pipe_fail;
typeset tmp bots dest conf querydir qual query bot sth file n;
typeset -a size name choice package botid;
typeset -i ep p i pp PP ii II;
n=$'\n';
tmp=$(mktemp  /tmp/a.XXXXXXXX);
bots=$(mktemp /tmp/b.XXXXXXXX); 
conf='/root/.config/animu.conf';
trap 'break 1;' INT;
quit () { cd ~; rm -f ${tmp} ${bots} &>/dev/null ; exit ${1:-0} }
cd /tmp;

[[ -s ${conf} ]] && {
  dest=$(pcre2grep -i -o1 '^d\s+(\S.+)$' ${conf}) || dest=;
  qual=$(pcre2grep -i -o1 '^q\s+(\S.+)$' ${conf}) || qual=;
};

while { getopts 'd:q:e:' g } { case ${g} {
  (d) dest=${OPTARG};;
  (q) qual=${OPTARG};;
  (e) ep=${OPTARG};;
}; };

if [[ -n ${dest} && -d ${dest:h} && ! -d ${dest} ]] {
  [[ -d ${dest} ]] || mkdir ${dest};
} else {
  until [[ -d ${dest:h} ]] {
    read -r "dest?${n}Input a download directory (max 1 child can be created): ";
  };
};
dest=${dest:a};

query="${${@[OPTIND,-1]}:-$(read -er "?${n}> ")}";
[[ ! ${query} =~ '^\s+$' ]] || return 1;
# read -r "ep?${n}Episode (leave empty for batch): ";

curl -sfL -o ${bots} https://api.nibl.co.uk/nibl/bots;
curl -sfL -o ${tmp}  https://api.nibl.co.uk/nibl/search\?query=$(uritool query escape ${query})\&episodeNumber=${ep};
[[ -s ${tmp} && -s ${bots} ]] || { printf "${tmp}, ${bots}: File(s) empty.\n"; quit 1 };

size=(${(fQ)"$(jq '.content[].size' ${tmp})"});
name=(${(fQ)"$(jq '.content[].name' ${tmp})"}); # tr -s '[:space:]' | tr '_' ' ' | 
[[ ${#name} -gt 1 && -z ${name[1]} ]] || { printf 'No results.\n'; quit };
choice=(${(f)"$(printf '%6s | %s\n' ${size:^name} | sort -uhk1 | fzf --bind "alt-v:select-all,alt-c:clear-selection" -i -m --reverse --no-sort --exact --query="${qual}")"}) || quit;

choice=(${choice##*| });
sth=$(sed 's/_/ /g; s/\(.*\)- .*/\1/; s/[0-9]//g; s/\[[^]]*\]//g; s/[0-9]//g; s/([^)]*)//g; s/\.[^.]*$//; s/^ *//g; s/ *$//' <<< ${(F)choice} | uniq -ci | sort -nr | head -n 1 | awk '{print substr($0, index($0,$2))}' | sed 's/ /%20/g');
querydir=${dest}/$(wget -q -O - "https://kitsu.io/api/edge/anime?filter[text]=${sth}&page[limit]=1&page[offset]=0" | jq -r '.data[].attributes.canonicalTitle' | tr -cd '[[:graph:]]');

[[ -d ${querydir} ]] || mkdir ${querydir};

for file ( ${choice} ) {
  sth=${${(qM)file//(#b)(+$^)/\\${match[1]}}//./\\.};
  
  botid=($(jq '.' ${tmp} | pcre2grep -o1 -M -B 2 -e "\"botId\": (\d+),\s+\"number\": \d+,\n\s+\"name\": \"${(Q)sth}\","));
  ((${#botid} == 0)) && 
  botid=($(jq '.' ${tmp} | pcre2grep -o1 -M -B 2 -e "\"botId\": (\d+),\s+\"number\": \d+,\n\s+\"name\": \"${(g..)sth}\",")); 
  ((${#botid} == 0)) && continue;
  
  package=($(jq '.' ${tmp} | pcre2grep -o1 -M -B 1 -e "\"number\": (\d+),\n\s+\"name\": \"${(Q)sth}\","));
  ((${#package} == 0)) && 
  package=($(jq '.' ${tmp} | pcre2grep -o1 -M -B 1 -e "\"number\": (\d+),\n\s+\"name\": \"${(g..)sth}\","));
  ((${#package} == 0)) && continue;

  pp=${#package};
  ii=${#botid};
  PP=${(c)#${#package}};
  II=${(c)#${#botid}};

  for p ( {1..${pp}} ) {
    for i ( {1..${ii}} ) {
      [[ ! -s "${querydir}/${file}" ]] || break 2;
      bot=$(jq '.' ${bots} | pcre2grep -o1 -M -A 1 -e "\"id\": ${botid[i]},\n\s+\"name\": \"(.+)\",");
      printf '%b%-16.16s%b%s\n' \
        '\033[0;35m'    botid: \
        '\033[1m'       ${(l.II..0.)i}/${ii} \
        '\033[0;36m'    package: \
        '\033[1m'       ${(l.PP..0.)p}/${pp} \
        '\033[0;33m'    file: \
        '\033[1m'       "${file}" \
        '\033[0;32m'    cmd: \
        '\033[1m'       "xdccget --dont-confirm-offsets -d \"${querydir}\" -q \"irc.rizon.net\" \"#nibl\" \"${bot} xdcc send #${package[p]}\"" \
        '\033[0;31m'    'next bot:' \
        '\033[1m'       '^C' \
        '\033[0;31m'    'quit:' \
        '\033[1m'       '^\';
      printf '\n\n%b' '\033[34;1m';
      until { xdccget --dont-confirm-offsets -d "${querydir}" -q "irc.rizon.net" "#nibl" "${bot} xdcc send #${package[p]}" } { sleep .1 };
    };
  };
};
quit;
