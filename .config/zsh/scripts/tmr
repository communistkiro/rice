#!/bin/zsh
emulate -LR zsh;
typeset o;
# local alarm=~/.local/CartoonFoghorn.m4a;
while { getopts apn o } {
  case $o {
    (a) typeset a;;
    (p) typeset p;;
    (n) typeset n;;
    (*)
less -F <<HEREDOC
NAME
tmr - a countdown/alarm script

SYNOPSIS
tmr [-n] ...
    [-a] ...
    [-p] ...
    [minutes [minutes]]
    [minutes]
    [hours minutes]
    [days hours minutes]
    [days hours minutes seconds]

DESCRIPTION
Start a countdown (default), set up an alarm (-a), or start a pomodoro session (-p)
from the given time paramters, and play an audio file on completion, or just issue a
bell. Days are always relative to today, i.e., 1 is tomorrow, or +24h. For coundowns,
negatives values are parsed as corrections, for alarms, because the day is relative,
a future alarm is always set unless all values are zero (default, if given empty
string). All values are integers. The default pomodoro cycle count (3), work- and
break-section durations (45/8) can be editted in the script. Given no arguments, it
prompts for the days, hours, minutes, seconds for an alarm or countdown. The formatted
remaining time is output to /tmp/tmr.tmr.tmr to possibly be read by status monitors.

CONTROLS
SIGINT (^C) to pause; SIGQUIT (^\) to quit.

EXAMPLES
An alarm for 00:55:57 on the 8. days after today
  tmr -a 7 26 -61 -183

An alarm for next hour, xx:00:00
  tmr -a 1 0

An alarm for midnight, 00:00:00
  tmr -a 1 0 0

An alarm for 22:57:59 tonight or tomorrow, depending on current time
  tmr -a 1 -1 -1 -1

An alarm for 00:06:34
  tmr -a 7 -26

An alarm for the next time the minutes are 26, xx:26:00
  tmr -a 26

A 59-minute, 59-second countdown
  tmr 1 0 -1

A 4-second countdown not outputting to the tmp file
  tmr -n 0 0 0 4

If first argument negative, prepend w/ --; one minute countdown
  tmr -- -1 61

A 3-cycle pomodoro sesh with 45-minute work-, and 8-minute break-sections
  tmr -p

A 3-cycle pomodoro sesh with 30-minute work-, and 10-minute break-sections
  tmr -p 30 10

EXIT STATUS
0
  on successfully completed countdown or alarm.
1
  if all values are zero, and/or corrections yield a value in the past.
2
  on quitting via ^\.
BUGS
Please report aberrant behavior or bugs to vlg@tutamail.com

HEREDOC
return 1;; } };

(($+p)) && {
  for o ( {1..3} ) {
    printf '%s\n%b\n' "Starting ${o}. pomodoro cycle." '\aWork!';
    tmr ${@[OPTIND]:-45};    ((? != 2)) || break;
    printf '%b\n' '\aBreak!';
    tmr ${@[OPTIND + 1]:-8}; ((? != 2)) || break;
  };
  return $?;
};

typeset tmp;
typeset -i w b d h m s D H M S t;
tmp=/tmp/tmr.tmr.tmr;

if     ((# - OPTIND == 3)) {
  d=${@[OPTIND]}; h=${@[OPTIND + 1]}; m=${@[OPTIND + 2]}; s=${@[OPTIND + 3]};
} elif ((# - OPTIND == 2)) {
  d=${@[OPTIND]}; h=${@[OPTIND + 1]}; m=${@[OPTIND + 2]};
} elif ((# - OPTIND == 1)) {
                  h=${@[OPTIND]};     m=${@[OPTIND + 1]};
} elif ((# - OPTIND == 0)) {
                                      m=${@[OPTIND]};
} else {
  (($+a)) && printf '%s\n' 'Set alarm for' || printf '%s\n' 'Set countdown for';
  read 'd?days    : ';
  read 'h?hours   : ';
  read 'm?minutes : ';
  read 's?seconds : ';
};

((d == 0 && h == 0 && m == 0 && s == 0)) && return 1;

if (($+a)) {
  m=$((m + s / 60)); s=$((s % 60));
  h=$((h + m / 60)); m=$((m % 60));
  d=$((d + h / 24)); h=$((h % 24));

  S=$(date +%S);
  M=$(date +%M);
  H=$(date +%H);

  if     ((S >= s && m == 0 && h == 0 && d == 0)) {
    m=$((M + 1)); h=$H;
  } elif ((M > m || M == m && S >= s && h == 0 && d == 0)) {
    h=$((H + 1));
  } elif ((M < m && h == 0 && d == 0)) {
    h=$H;
  } elif ((H > h || H == h && M >= m && d == 0)) {
    ((d += 1));
  } elif ((d < 0 || 60 * (60 * (24 * d + h) + m) + s < 0)) {
    return 1;
  };

  printf "Alarm set for %s.\n\n" "$(date -d "$(date +%F) +$d days +$h hours +$m minutes +$s seconds" '+%F %T')";
  t=$(($(date -d "$(date +%F) +$d days +$h hours +$m minutes +$s seconds" '+%s') - $(date +%s)));
} else {
  t=$((60 * (60 * (24 * d + h) + m) + s));
  ((t > 0)) || return 1;
};

trap 'rm ${tmp} &>/dev/null; return 2' QUIT;
trap 'printf "PAUSED - press any key to continue\n"; read -sk1' INT;

((${+n})) && sleep $t || 
for ((0; t > 0; t-= 1)) {
  printf '%.2d:%.2d:%.2d\n' $((t / 3600)) $((t % 3600 / 60)) $((t % 60)) | tee $tmp;
  sleep 1;
};

# if ((? == 0)) && { mpc status &>/dev/null | pcre2grep -q playing } {
#   mpc -q toggle; mpv --no-config --really-quiet $alarm; mpc -q toggle;
#   mpc -q toggle; beep -f 200 -l 100 -d 100 -r 2; mpc -q toggle;
# } else {
#   mpv --really-quiet $alarm;
  beep -f 400 -l 66 -d 66 -r 3; printf '\a'; 
# };

rm $tmp &>/dev/null; return 0;
