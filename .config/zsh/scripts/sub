#!/bin/sh
#!/bin/zsh
# # searches, downloads, unzips, loads subs for currently playing mpv file
u='VwAxYImyiMgeaXWXOSkB'; # username
p='HgFdrwvpWYhSfSoHZhKcBQVGvimwRrKopFPNEXqWPEBsakGHXTTHgtoweeVXrnFXipDBICGSJeQzircESKtjPKUyBWZjKPBRyQKDVlIkinPrnSGDigJLYMMhGMwFIoS'; # password
# m="$(pgrep -nxa mpv | gre -o '/.*$')" || return 1; # currently playing video
# h='/moviehash-'"$(hashmov.pl ${m})"; # hash identifying movie file via https://trac.opensubtitles.org/projects/opensubtitles/wiki/HashSourceCodes
# b='/moviebytesize-'"$(du --bytes ${m} | grep -Po '^\d+')"; # movie bytesize
# if [[ ${m##*/} =~ '[sS]?\d{1,3}.?[eE]?\d{1,3}?' ]]; then 
#     e=$(echo ${m##*/}|perl -pe 's/.*?[sS]?(0?\d+)\.?[eE]?(\d+).*/\1---\2/'); # season and episode
#     s='/episode-'"${e#*---}"; # season
#     e='/season-'"${e%---*}" # episode
#     [[ ${#s} -ge 11 ]] && unset s; # no 3-digit seasons, even with leading zero
#     [[ ${#e} -ge 12 ]] && unset e; # no 4-digit episodes, even with leading zero
# fi;
# [ -f /tmp/ISO_639-2.json ] || curl -s "https://raw.githubusercontent.com/wecodemore/ISO_639-2/master/ISO_639-2.json" > /tmp/ISO_639-2.json;
# # l1=($(sed -rn 's/.*"([a-z]{3})":/\1/ p' /tmp/ISO_639-2.json));
# # l2=($(sed -rn '/"[a-z]{3}"/ {n;n;n;p}' /tmp/ISO_639-2.json | sed ':a;/,$/{N;s/\n//;ba}' | tr -d '",'));
# # s=...echo ${a} | awk '{print $2}' FS='\t' | tr -s '\n' |tr -d '":')
# # d=...echo ${a} | awk '{print $4}' FS='\t' | tr -s '\n' |tr -d '"'
# z="$(pcre2grep -Mv '\s+"native": \[\s+(.*?\s)*?\]' /tmp/ISO_639-2.json | sed '/"english": /d; /[{}]/d' | pcre2grep -Mv '^\s+"[a-z]{2}":(.*?\s)+?((?!\s+"[a-z]{3}":).+)')";
# x=("${(@f)$(echo ${z} | grep -Po '"[a-z]{3}(-[a-z]{3})?":' | tr -d '":\t')}");
# c=(${(ps:_:)"$(echo ${z} | pcre2grep -M ':([^:])*' | tr -s '\n' | tr -d '"\t' | tr ':' '_')"}); c[1]=();
# for z in {1..${#x}}; do c[$z]=$(echo ${c[$z]} | sed '1d; $d' | tr -d '\xd' | tr '\xa' ' '); done;
# l="$(printf "%-11s%s\n" "${(@)x:^c}" | dmenu -i -p 'select language')" && l='/sublanguageid-'"${l%% *}";
# # z=$(lynx -listonly -dump "https://opensubtitles.org/search/${m##*/}${h}${b}${s}${e}${l}" | grep -Po 'http.*/subtitleserve/sub/.*$' | sed 's/www/dl/; s/subtitleserve/download/; s/http/https/'); 
# for a in $(lynx -listonly -dump "https://opensubtitles.org/search/${m##*/}${h}${b}${s}${e}${l}" | grep -Po 'http.*/subtitleserve/sub/.*$'); do lynx -listonly -dump "${a}" | grep -Po 'http://dl.*' | grep '/file/'; done;

# # z=$(printf "%s\n" "${(@)z}" | dmenu -i -l ${#z} -p 'select subtitle'); # comment/uncomment this line to download all/a selected sub(s)
# for a in ${(@)z}; do wget -P "${m%/*}/" ${a}; done;

# unzip "${m%/*}"/*.zip;
# unset u p m t h b e s z;

a="$(pgrep -anx mpv)";
subliminal --opensubtitles $u $p download -l en -hi -d "$(echo $a | grep -Po '/.*/')" "${a##*/}";
pkill mpv; mpv "$(echo $a | grep -Po '/.*/')${a##*/}";

rescan-external-files