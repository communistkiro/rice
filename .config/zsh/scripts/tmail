#!/bin/zsh
# temporary mail
[[ -t 0 ]] || return 1;
# { which zsh && which fzy && which rdrview && which pcre2grep } &>/dev/null || return 2;
ping -c 1 1.1.1.1 &>/dev/null || return 3;

menu () {
  typeset m t a;
  while { getopts 'm:t:' a } { case $a {
    (m) 
      m='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
    (t)
      t='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
  }; };
  for a ( ${@[OPTIND,-1]} ) { printf '\t%b%s\t\t%b%s%b\n' ${m:-\\033\[0m} ${a%% *} ${t:-\\033\[0m} "${a#* }" '\033[0m' };
}

box () {
((# > 0)) || return 0;
typeset a d h B T H tl tr bl br th bh lv rv r w; 
typeset -i s;
s=1;
while { getopts 's:h:B:T:H:' a } { case $a {
  (s) # line style
    ((OPTARG >= 1 && OPTARG < 5)) && s=$OPTARG;;
  (h) # header
    h=${OPTARG};;
  (B) # box color
    B='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
  (T) # text color
    T='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
  (H) # header color
    H='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
}; };

((# + 1 > OPTIND)) || return 0;

tl=${$(<<<'┏ ┌ ╔ ⡏')[s]}; # top left
bl=${$(<<<'┗ └ ╚ ⣇')[s]}; # bottom left
tr=${$(<<<'┓ ┐ ╗ ⢹')[s]}; # top right
br=${$(<<<'┛ ┘ ╝ ⣸')[s]}; # bottom right
th=${$(<<<'━ ─ ═ ⠉')[s]}; # top horizontal
bh=${$(<<<'━ ─ ═ ⣀')[s]}; # bottom horizontal
lv=${$(<<<'┃ │ ║ ⡇')[s]}; # left vertical
rv=${$(<<<'┃ │ ║ ⢸')[s]}; # right vertical
# box inside width
w=${${(On)@[OPTIND,-1]//(#m)*/${#MATCH}}[1]};
(($+h)) && {
  h=$(tr '\n\t\r\f' ' ' <<< $h)
  (($#h > w)) && w=$(($#h + 4));
};

if ((w + 2 > COLUMNS)) {
  # FIXME; IF HEADER MULTI ROW OR LONGER THAN COLUMNS ... ELSE
  (($+h)) &&
#   if ((${#${h//[^$'\n']/}} > 0)) {
#   } elif (($#h > COLUMNS - 4)) {
#   } else {
    printf '%b%s%s%b%s%b%s%s\n' $B $tl ${(pr.(COLUMNS-2-$#h)/2..$th.)} $H $h $B ${(pr.(COLUMNS-2-$#h)/2+$#h+COLUMNS-2-($#h+COLUMNS-2)/2*2..$th.)} $tr
#   };
    printf '%b%s%s%s\n' $B $tl ${(pr.COLUMNS-3..$th.)} $tr;
  for a ( $@[OPTIND,-1] ) {
    # for d ( ${(f)"$(fmt -w $COLUMNS <<< $a)"} ) {
    for d ( ${(f)"$(<<<$a)"} ) {
      printf '%s %b%s%b %s\n' $lv $T ${(r.COLUMNS-4.)d} $B $rv;
    };
  };
  printf '%s%s%s%b\n' $bl ${(pr.COLUMNS-2..$bh.)} $br '\033[0m';
} else {
  (($+h)) &&
    printf '%b%s%s%b%s%b%s%s\n' $B $tl ${(pr.(w-$#h)/2..$th.)} $H $h $B ${(pr.(w-$#h)/2+$#h+w-($#h+w)/2*2..$th.)} $tr ||
    printf '%b%s%s%s\n' $B $tl ${(pr.w-1..$th.)} $tr;
  for a ( $@[OPTIND,-1] ) { printf '%s %b%s%b %s\n' $lv $T ${(r.w-2.)a} $B $rv };
  printf '%s%s%s%b\n' $bl ${(pr.w..$bh.)} $br '\033[0m';
};
}

fetchEmail () { # List all the received emails in a nicely formatted order
  curl -s -f -L --max-redirs 0 -H 'User-Agent:' -o $a "${api}?action=getMessages&login=${userName}&domain=${domainName}";
 
  emailLength=$(jq length $a);
  ((emailLength == 0)) && read -k1 "?${n}No (new) mail." && return 1;

  emailNumber=#;          emailNumber+=($(seq -w $emailLength));
  emailId=ID;             emailId+=(${(f)"$(jq -r '.[].id' $a)"});
  emailFrom=From;         emailFrom+=(${(f)"$(jq -r '.[].from' $a)"});
  emailSubject=Subject;   emailSubject+=(${(f)"$(jq -r '.[].subject' $a)"});
  emailTime=Time;         emailTime+=(${(f)"$(jq -r '.[].date' $a)"});
}

 viewEmail () { # View an email by ID
  typeset b;
  [[ -f ${dir}/${userName}${domainName}${1} ]] || curl -s -f -L --max-redirs 0 -H 'User-Agent:' -o ${dir}/${userName}${domainName}${1} "${api}?action=readMessage&login=${userName}&domain=${domainName}&id=${1}";
  [[ $(< ${dir}/${userName}${domainName}${1}) = "Message not found" ]] && read -sk1 "?${n}Message not found." && return;

  # b=$(jq -r '.htmlBody' ${dir}/${userName}${domainName}${1});

  # printf '%b\n' \
  #   "\033[;30;0m To:\033[;36;1m ${(l.8...)}${userName}@1secmail.${domainName}\033[;0m" \
  #   "\033[;32;0m From:\033[;32;1m ${(l.6...)}$(jq -r '.from' ${dir}/${userName}${domainName}${1})\033[;0m" \
  #   "\033[;34;0m Subject:\033[;34;1 ${(l.5...)}$(jq -r '.subject' ${dir}/${userName}${domainName}${1})\033[;0m" \
  #   "${b:-$(jq -r '.textBody' ${dir}/${userName}${domainName}${1})}" | less;

  [[ -f ${dir}/${userName}${domainName}${1}.html ]] || {
    printf '%s\n' \
      "<pre><b>To: </b>${userName}@1secmail.${domainName}" \
      "<b>From: </b>$(jq -r '.from' ${dir}/${userName}${domainName}${1})" \
      "<b>Subject: </b>$(jq -r '.subject' ${dir}/${userName}${domainName}${1})</pre>" \
      "${$(jq -r '.htmlBody' ${dir}/${userName}${domainName}${1}):-<pre>$(jq -r '.textBody' ${dir}/${userName}${domainName}${1})</pre>}" > ${dir}/${userName}${domainName}${1}.html;
  };
  rdrview -B 'elinks -dump' ${dir}/${userName}${domainName}${1}.html | less;
}

generateAddress () { # generate random email address
  typeset domains;
  domains=(1secmail.com 1secmail.net 1secmail.org wwjmp.com);
  domainName=${domains[(RANDOM % 4 + 1)]};
  userName=$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c $((RANDOM % 16 + 17)) | tr '[:upper:]' '[:lower:]');
}

customAddress () {
  typeset customName;
  read "customName?${n}Custom address ([a-z0-9]+)> ";
  [[ ${customName} =~ '[a-z0-9]+' ]] && userName=${customName} || { read -sk1 "?${n}Invalid username." && return 1 };
  menu -t 6b -m 2b 'Domain_name: ' '* 1secmail.com' ' 2 1secmail.net' '3 1secmail.org' '4 wwjmp.com';
  case $(read -sek1 "?${n}") {
    (2) domainName=1secmail.net;;
    (3) domainName=1secmail.org;;
    (4) domainName=wwjmp.com;;
    (*) domainName=1secmail.com;;
  };
}

setAddress () { # saves current address for later use
  if [[ -n ${userName} && -n ${domainName} ]] {
    if { pcre2grep -q "^${userName}@${domainName}$" ${dir}/emailaddresses } {
      read -k1 "?${n}Already in set email addresses.";
    } else {
      printf '%s\n' "${userName}@${domainName}" >> ${dir}/emailaddresses;
    };
  } else {
    read -k1 "?${n}No email address.";
  };
}

pickAddress () { # select one of previously set addresses
  (($(wc -l < ${dir}/emailaddresses) > 0)) || return;
  typeset s;
  s=$(fzy -l ${LINES} < ${dir}/emailaddresses) || return;
  userName=${s%@*};
  domainName=${s#*@};
}

() {
  typeset dir api c a s emailLength emailNumber emailId emailFrom emailSubject emailTime userName domainName n;
  n=$'\n'; api=https://www.1secmail.com/api/v1/; dir=/tmp/tmpmail; 
  [[ -d ${dir} ]] || mkdir ${dir};
  touch ${dir}/emailaddresses;

  a=$(mktemp ${dir}/XXXXXXXX);
  while { true } {
    clear;
    box -H i5 -B 4b -T 2 -h ${userName}@${domainName} ${(f)"$(for s ( {1..$((emailLength+1))} ) { printf '%s&&%s&&%s&&%s&&%s\n' ${emailNumber[s]:-\#} ${emailTime[s]:-Time} ${emailId[s]:-ID} ${emailFrom[s]:-From} ${emailSubject[s]:-Subject}; } | column -t -s '&&')"};
    menu -t 6b -m 2b \
      'g (re)generate address' \
      's save current' \
      'r refresh inbox' \
      'R fetch and view most recent' \
      'y copy address to clipboard' \
      'c pick from previously set' \
      'C custom address' \
      '# view email #_' \
      'q quit';
    read -k1 "c?${n}Select action> ";
    case ${c} {
      (g) generateAddress;;
      (s) setAddress;;
      (r) fetchEmail;;
      (R) fetchEmail && viewEmail ${emailId[1+1]};;
      (y) [[ -z ${userName} || -z ${domainName} ]] || printf '%s' ${userName}@${domainName} | xclip -se c;;
      (c) pickAddress;;
      (C) customAddress;;
      (0) ((c += 10));&
      ([0-9]) ((c > ${emailLength:-0})) && read -sk1 "?${n}Invalid email number." || viewEmail ${emailId[c+1]};;
      (q) rm ${a}; break;;
    };
  };
}
