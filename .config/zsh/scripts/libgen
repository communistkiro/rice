#!/bin/zsh
[[ -t 0 ]] || return 1;
# { which zsh && which pup && which curl && which wget && which pcre2grep } &>/dev/null || return 2;
emulate -LR zsh;
setopt pipefail kshglob extendedglob;
typeset query base t n;

quit () { rm -f ${t}; exit ${1:-0} };

n=$'\n'; t=$(mktemp);
query=$(printf '%s' ${(j..)${(s..)@:-$(read -er "?${n}> ")}/(#b)([^A-Za-z0-9-_.~])/%${(l.2..0.)$(([##16]#match))}});
[[ ! ${query} =~ '^\s*$' ]] || quit 4;

ping -c 1 libgen.rs &>/dev/null && base=http://libgen.rs/ ||
ping -c 1 libgen.is &>/dev/null && base=http://libgen.is/ ||
ping -c 1 libgen.st &>/dev/null && base=http://libgen.st/ ||
quit 3;

uridecode () {
  typeset w;
  eval "w=\$'${${${@}:gs/\\/\\\\}:gs/%/\\x}'";
  printf '%s' ${w};
}

menu () {
  typeset m t a;
  m='\033[0;';
  t='\033[0;';
  while { getopts 'm:t:' a } { case $a {
    (m) 
      m+=${${${${OPTARG//[^0-7iIbB]/}//(#m)[0-7]/3${MATCH};}//[iI]/7;}//[bB]/1;};;
    (t)
      t+=${${${${OPTARG//[^0-7iIbB]/}//(#m)[0-7]/3${MATCH};}//[iI]/7;}//[bB]/1;};;
  }; };
  m=${m%?}m;
  t=${t%?}m;
  for a ( ${@[OPTIND,-1]} ) { printf '\t%b%s\t\t%b%s%b\n' ${m} ${a%% *} ${t} "${a#* }" '\033[0m' };
}

export FZF_DEFAULT_OPTS="-i +m --reverse --ansi --bind=\[:up,\':down --tiebreak=begin";

menu -m 4b -t 2b  'Search_where: ' \
  '1 LibGen (Sci-Tech)' \
  '2 Scientific articles' \
  '3 Fiction' \
  '4 Comics' \
  '5 Standards' \
  '6 Magazines' \
  '* Quit';

case $(read -sek1 "?${n}") {
  (1)
    typeset -i results pages lr lt la le lp ls lf lP c q;
    typeset -a mirror title author md5 language edition publisher year length size format ext url;
    base+=search.php\?view=detailed\&res=100;

    base+=\&phrase=$((++q));
    menu -m 4b -t 2b 'Field_to_search: ' \
      '* any' \
      '1 title' \
      '2 authors' \
      '3 series' \
      '4 publisher' \
      '5 year' \
      '6 ISBN' \
      '7 language' \
      '8 md5' \
      '9 tags' \
      '0 extension' 
      case $(read -sek1 "?${n}> ") {
        (1) base+=\&column=title;;
        (2) base+=\&column=authors;;
        (3) base+=\&column=series;;
        (4) base+=\&column=publisher;;
        (5) base+=\&column=year;;
        (6) base+=\&column=isbn;;
        (7) base+=\&column=year;;
        (8) base+=\&column=md5;;
        (9) base+=\&column=tags;;
        (0) base+=\&column=extension;;
        (*) base+=\&column=def;;
      };
      base+=\&req=${query};

    curl -sfLH User-Agent: -o ${t} ${base//detailed/simple}\&open=0;

    mirror+=($(pup -p -f ${t} 'tbody tr td:nth-child(10) a attr{href}' | head -n 1));
    mirror+=($(pup -p -f ${t} 'tbody tr td:nth-child(11) a attr{href}' | head -n 1));
    mirror+=($(pup -p -f ${t} 'tbody tr td:nth-child(12) a attr{href}' | head -n 1));
    # mirror+=($(pup -p -f ${t} 'tbody tr td:nth-child(13) a attr{href}' | head -n 1)); #FIXME
    mirror+=($(pup -p -f ${t} 'tbody tr td:nth-child(14) a attr{href}' | head -n 1));
    mirror=($(pcre2grep -M -o1 '^(.+[=/])(\2|.+)$' <<< ${(F)mirror}));

    curl -sfLH User-Agent: -o ${t} ${base}\&open=0;

    results=$(pup -p -f ${t} 'tbody tr td[align=left] text{}' | cut -d ' ' -f 1);
    ((results > 0)) || { read -sk1 "?${n}No results."; quit };
    ((results < 101)) && pages=1 || { pages=$((results / 100)); ((results % 100 == 0)) || pages=$((pages + 1)) };

    ((pages > 2)) && [[ $(read -seq "?${results} results over ${pages} pages. Show all [y/*]? ") == n ]] && {
      read -r "q?${n}Pages to show> ";
      ((q > 0 && q <= pages)) && {
        ((q == pages)) || {
          results=$((q * 100))
          pages=${q};
        };
      } || {
        read -sk1 "${n}Invalid selection.${n}Showing first 200 results only.";
        pages=2;
        results=200;
      };
    };
    for q ( {1..${pages}} ) {
      # SIMPLE VIEW
      # title=(${(f)"$(pup -p -f ${t} 'tbody tr td[width=500]:nth-child(3) > a[id] text{}' | perl -pe 'BEGIN {undef $/} s/\n \n[^\n]+//g')"});
      # md5+=(${${(f)"$(pup -p -f ${t} 'tbody tr td[width=500] a[id] attr{href}')"}##*=});
      # publisher+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(4) text{}')"}[2,-1]});
      # year+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(5) text{}')"}[2,-1]});
      # length+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(6) text{}')"}[2,-1]});
      # language+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(7) text{}')"}[2,-1]});
      # size+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(8) text{}')"}[2,-1]});
      # format+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(9) text{}')"}[2,-1]});
          # author+=(${(f)"$(pup -p -f ${t} 'tbody tr td:nth-child(2)' | perl ...............................)"});
          # edition+=(${(f)"$(pup -p -f ${t} 'tbody tr td:nth-child(3) | perl ..............................')"});

      # DETAILED VIEW
      author+=(${(f)"$(     pup -p -f ${t} 'tbody td[colspan=3] text{}' | perl -pe 'BEGIN {undef $/} s/(\S ?)\n/\1/g; s/\n\s*/\n/g')"});
      title+=(${(f)"$(      pup -p -f ${t} 'tbody tr td[colspan=2] text{}')"});
      md5+=(${${(f)"$(        pup -p -f ${t} 'tbody tr td[colspan=2] a attr{href}')"}##*=});
      publisher+=(${${(f)"$(pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[4].children[1].text')"}[3,-2]});
      year+=(${${(f)"$(     pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[5].children[1].text')"}[3,-2]});
      edition+=(${${(f)"$(  pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[5].children[3].text')"}[3,-2]}); #FIXME
      length+=(${${(f)"$(   pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[6].children[3].text')"}[3,-2]//*([^0-9])(#b)(+([0-9]))*([^0-9]*)/${match[1]}});
      language+=(${${(f)"$( pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[6].children[1].text')"}[3,-2]});
      size+=(${${${(f)"$(   pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[9].children[1].text')"}[3,-2]%% \(*}});
      format+=(${${(f)"$(   pup -p -f ${t} 'tbody json{}' | jq -r '.[].children[9].children[3].text')"}[3,-2]});
      # added=(${${(f)"$(    pup -f z -p 'tbody json{}' | jq -r '.[].children[9].children[3].text')"}[3,-2]});
      curl -sfLH User-Agent: -o ${t} ${base}\&sort=def\&sortmode=ASC\&page=$((++q));
    };

    lr=${(c)#results};
    le=${${(On)edition//(#m)*/${#MATCH}}[1]};
    lp=${${(On)publisher//(#m)*/${#MATCH}}[1]};
    la=${${(On)author//(#m)*/${#MATCH}}[1]};
    ll=${${(On)length//(#m)*/${#MATCH}}[1]};
    ls=${${(On)size//(#m)*/${#MATCH}}[1]};
    lf=${${(On)format//(#m)*/${#MATCH}}[1]};
    lL=${${(On)language//(#m)*/${#MATCH}}[1]};
    lt=${${(On)title//(#m)*/${#MATCH}}[1]};
    # lt=$((COLUMNS - lr - 1 - 1 - le - 1 - lp - 1 - 4 - 1 - la - 1 - lL - 1 - ll - 1 - ls - 1 - lf));
    lP=$((lr + 1 + lt + 1 + le + 1 + lp + 1 + 4 + 1 + lL + 1 + la + 1 + ll + 1 + ls + 1 + lf));
    ((lP % COLUMNS == 0)) && lP=$((lP / COLUMNS)) || lP=$((lP / COLUMNS + 1));

    while { true } {
      c=$(for q ( {1..${results}} ) {
        printf "%b%.${lr}d %b%-${lt}.${lt}s %-${le}.${le}s %b%-${lp}.${lp}s %b%-4.4s %b%-${la}.${la}s %b%${lL}.${lL}s %b%${ll}.${ll}s %b%${ls}.${ls}s %b%-${lf}.${lf}s\n" \
          '\033[0m'    $q \
          '\033[37;1m' ${title[q]:- } \
                       ${edition[q]:/null/ } \
          '\033[36;1m' ${publisher[q]:/null/ } \
          '\033[35;1m' ${year[q]:/null/ } \
          '\033[33;1m' ${author[q]:- } \
          '\033[30;1m' ${language[q]:/null/ } \
          '\033[31;1m' ${length[q]:/null/ } \
          '\033[34;1m' ${size[q]:/null/ } \
          '\033[32;1m' ${format[q]:/null/ };
      } | fzf --preview-window=down:${lP}:wrap:noborder --preview='printf "%s\n" {}' | cut -d ' ' -f 1) || break;
      ((c > 0 && c <= results)) && {
        while { true } {
          clear;
          menu -m 4b -t 2b "md5: ${md5[c]}${n}Select_mirror: : " ${(f)"$(nl -n ln <<< ${(F)mirror})"};
          case $(read -sek1) {
            (1) url+=($(curl -sfLH User-Agent: ${mirror[1]}${md5[c]} | pup -p 'div#download a attr{href}' | nl -n ln | fzf | cut -f 2)) && ext+=(${(L)format[c]}) || read -sk1 "?${n}Try another mirror.";;
            (2) url+=($(curl -sfLH User-Agent: ${mirror[2]}${md5[c]} | pup -p ':parent-of(h2) attr{href}')) && ext+=(${(L)format[c]}) || read -sk1 "?${n}Try another mirror.";;
            (3) read -sk1 "?${n}FIXME";; # url+=($(curl -sfLH User-Agent: ${mirror[3]}${md5[c]} | pup -p '...'))
            (4) read -sk1 "?${n}FIXME";; # url+=($(curl -sfLH User-Agent: ${mirror[4]}${md5[c]} | pup -p '...'))
            (5) read -sk1 "?${n}FIXME";; # url+=($(curl -sfLH User-Agent: ${mirror[5]}${md5[c]} | pup -p '...'))
            (*) break;;
          };
        };
      };
    };

    ((${#url} == 0)) || printf '%s\n' 'All URLs:' ${(u)url} ${(l.COLUMNS..-.)};
    q=0;
    for n ( ${(u)url} ) {
      [[ ${n} =~ "\.${ext[++q]}$" ]] && {
        [[ ${n} =~ '\?filename=' ]] && {
          wget -O ~/Downloads/"$(uridecode ${n#*=})" ${n};
        } || wget -P ~/Downloads/ ${n};
      } || {
        wget -O ~/Downloads/$(tr -cd '[:alnum:]' < /dev/urandom | head -c 8).${ext[q]} ${n};
      };
    };
  ;;
  (2)
    base+=scimag/\?q=${query};
    typeset -a mirror title author journal volume size doi url;
    typeset -i pages lr lt la lj lv ls lP q c;

    curl -sfLH User-Agent: -o ${t} ${base};
    [[ $(pup -p -f ${t} 'html body p:nth-last-child(2) text{}') != 'No articles were found.' ]] || { printf '%s\n' 'No articles were found.'; quit };
    pages=$(pup -f ${t} '.page_selector text{}' | head -n 1 | cut -d ' ' -f 4);
    mirror=($(pcre2grep -o1 '^(.+[=/])(\d{2}\.\d+.+|\2)$' <<< ${(F)${(f)"$(pup -p -f ${t} 'tbody tr td ul.record_mirrors a attr{href}')"}[1,3]}));

    for q ( {1..${pages}} ) {
      doi+=(${${(f)"$(  pup -p -f ${t} 'tbody tr td:nth-child(4) a attr{href}')"}#*=});
      title+=(${${(ps.</a>.)"$(pup -p -f ${t} 'tbody tr td:nth-child(2) p:first-child a' | perl -pe 'BEGIN {undef $/} s/^<a href.+\n//m; s/(\S)\n\s*/$1/g; s/<\/?em>//g')"}});
      author+=(${(f)"$( pup -p -f ${t} 'tbody tr td:nth-child(1) text{}')"});
      journal+=(${(f)"$(pup -p -f ${t} 'tbody tr td:nth-child(3) p:first-child text{}')"});
      volume+=(${(f)"$( pup -p -f ${t} 'tbody tr td:nth-child(3) p:last-child  text{}')"});
      size+=(${(ps.\[edit\].)"$(pup -p -f ${t} 'tbody tr td:nth-child(4) text{}' | tr -d '\n')"});
      curl -sfLH User-Agent: -o ${t} ${base}\&page=$((++q));
    };
    
    results=${#doi};
    lr=${(c)#results};
    lt=${${(On)title//(#m)*/${#MATCH}}[1]};
    la=${${(On)author//(#m)*/${#MATCH}}[1]};
    lj=${${(On)journal//(#m)*/${#MATCH}}[1]};
    lv=${${(On)volume//(#m)*/${#MATCH}}[1]};
    ls=${${(On)size//(#m)*/${#MATCH}}[1]};
    # lt=$((COLUMNS - lr - 1 - 1 - la - 1 - lj - 1 - lv - 1 - ls));
    lP=$((lr + 1 + lt + 1 + la + 1 + lj + 1 + lv + 1 + ls));
    ((lP % COLUMNS == 0)) && lP=$((lP / COLUMNS)) || lP=$((lP / COLUMNS + 1));    

   while { true } {
      c=$(for q ( {1..${results}} ) {
        printf "%b%.${lr}d %b%-${lt}.${lt}s %b%-${la}.${la}s %b%-${lj}.${lj}s %b%-${lv}.${lv}s %b%${ls}.${ls}s\n" \
          '\033[0m'    $q \
          '\033[37;1m' ${title[q]:- } \
          '\033[34;1m' ${author[q]:- } \
          '\033[33;1m' ${journal[q]:- } \
          '\033[33;1m' ${volume[q]:- } \
          '\033[32;1m' ${size[q]:- };
      } | fzf --preview-window=down:${lP}:wrap:noborder --preview='printf "%s\n" {}' | cut -d ' ' -f 1) || break;

      ((c > 0 && c <= results)) && {
        while { true } {
          clear;
          menu -m 4b -t 2b "doi: ${doi[c]}${n}Select_mirror: : " ${(f)"$(nl -n ln <<< ${(F)mirror})"};
          case $(read -sek1) {
            (1) url+=($(curl -sfLH User-Agent: ${mirror[1]}${doi[c]} | pup -p 'div ul li a attr{href}' | pcre2grep -o1 '(http.+)\?download=true')) || read -sk1 "?${n}Try another mirror.";;
            (2) url+=($(curl -sfLH User-Agent: ${mirror[2]}${doi[c]} | pup -p 'a:parent-of(h2) attr{href}')) || read -sk1 "?${n}Try another mirror.";;
            (3) url+=(https://booksc.xyz$(curl -sfLH User-Agent: ${mirror[3]}${doi[c]} | pup -p 'a.dlButton attr{href}')) || read -sk1 "?${n}Try another mirror.";;
            (*) break;;
          };
        };
      };
    };

    ((${#url} == 0)) || printf '%s\n' 'All URLs:' ${(u)url} ${(l.COLUMNS..-.)};
    for n ( ${(u)url} ) {
      [[ ${n} =~ '\.pdf$' ]] && {
        wget -O ~/Downloads/"$(uridecode ${n##*/})" ${n};
      } || {
        wget -O ~/Downloads/$(tr -cd '[:alnum:]' < /dev/urandom | head -c 8).pdf ${n};
      };
    };
  ;;
  (3)
    typeset -i results pages lr lt la ls ll lP c q;
    typeset -a mirror title author md5 language series sizeformat formats ext url langs format lang target;

    formats=(epub mobi azw azw3 fb2 pdf rtf txt);
    base+=fiction/;
    langs=(${(f)"$(curl -sfLH User-Agent: ${base} | pup -p 'select[name=language] option attr{value}')"});
    base+=\?q=${query};

    menu -m 4b -t 2b 'Field_to_search: ' \
      '* any' \
      '1 title' \
      '2 authors' \
      '3 series';
    case $(read -sek1 "?${n}") {
      (1) base+=\&criteria=title;;
      (2) base+=\&criteria=authors;;
      (3) base+=\&criteria=series;;
      (*) base+=\&criteria=;;
    };

    [[ $(read -seq "?${n}Query uses wildcards [y/*]?> ") == y ]] && base+=\&wildcard=1;

    lang=($(fzy -l $LINES -p 'Language?> ' <<< ${(F)langs}));
    lang=${lang:*langs};
    base+=\&language=${lang};

    format=($(fzy -l $LINES -p 'Format?> ' <<< ${(F)formats}));
    format=${format:*formats};
    base+=\&format=${format};

    curl -sfLH User-Agent: -o ${t} ${base};
    mirror=($(pup -p -f ${t} 'ul.record_mirrors_compact a attr{href}' | pcre2grep -M -o1 '^(.*[/=])($1|.+)$' | sort -u));

    [[ $(pup -f ${t} 'p text{}' | tail -n 1) != 'No files were found.' ]] || { read -sk1 "?${n}No results."; quit };
    pages=$(pup -f ${t} '.page_selector text{}' | head -n 1 | cut -d ' ' -f 4);
    results=${${"$(pup -f ${t} '.catalog_paginator [style=float:left] text{}' | head -n 1)"%% files found}#* }; # retarded: ' '  U+00A0  160    c2 a0       &nbsp;     NO-BREAK SPACE (Space_Separator)
    ((results > 0)) || { read -sk1 "?${n}No results."; quit };

    ((pages > 4)) && [[ $(read -seq "?${results} results over ${pages} pages. Show all [y/*]? ") == n ]] && {
      read -r "q?${n}Pages to show> ";
      ((q > 0 && q <= pages)) && {
        ((p == pages)) || {
          results=$((q * 25))
          pages=${q};
        };
      } || {
        read -sk1 "${n}Invalid selection.${n}Showing first 100 results only.";
        pages=4;
        results=100;
      };
    };

    for q ( {1..${pages}} ) {
      author+=(${(f)"$(    pup -p -f ${t} 'tbody td:nth-child(1) text{}' | perl -pe 'BEGIN {undef $/} s/(\w.+)\n(\w.+)/$2 $1/g; s/(\S)\n(\S)/$1 $2/g; s/\s{2,}/\n/g; s/(.+?), (.+)/$2 $1/g')"});
      md5+=(${${(f)"$(     pup -p -f ${t} 'tbody td:nth-child(6) li:first-of-type a attr{href}')"}##*/});
      title+=(${(f)"$(     pup -p -f ${t} 'tbody td:nth-child(3) text{}')"});
      series+=(${(f)"$(    pup -p -f ${t} 'tbody td:nth-child(2) json{}' | jq -r '.[].text')"});
      sizeformat+=(${(f)"$(pup -p -f ${t} 'tbody td:nth-child(5) text{}')"});
      [[ -n ${lang} ]] ||
      language+=(${(f)"$(  pup -p -f ${t} 'tbody td:nth-child(4) text{}')"});
      curl -sfLH User-Agent: -o ${t} ${base}\&page=$((++q));
    };

    lr=${(c)#results};
    lt=${${(On)title//(#m)*/${#MATCH}}[1]};
    ls=${${(On)series//(#m)*/${#MATCH}}[1]};
    la=${${(On)author//(#m)*/${#MATCH}}[1]};
    [[ -n ${lang} ]] ||
    ll=${${(On)language//(#m)*/${#MATCH}}[1]};

    # lt=$((COLUMNS - lr - 1 - 1 - ls - 1 - la - 1 - ll - 10 - 6));
    lP=$((lr + 1 + lt + 1 + ls + 1 + la + 1 + ll + 10 + 6));
    ((lP % COLUMNS == 0)) && lP=$((lP / COLUMNS)) || lP=$((lP / COLUMNS + 1));

    while { true } {
      c=$(for q ( {1..${results}} ) {
        printf "%b%.${lr}d %b%-${lt}.${lt}s %b%-${ls}.${ls}s %b%-${la}.${la}s %b%${ll}.${ll}s%b%10.10s%b%6.6s\n" \
          '\033[0m'    $q \
          '\033[37;1m' ${title[q]:- } \
          '\033[36;1m' ${series[q]:/null/ } \
          '\033[33;1m' ${author[q]:- } \
          '\033[31;1m' ${language[q]:- } \
          '\033[34;1m' ${${sizeformat[q]#* / }:- } \
          '\033[32;1m' ${${sizeformat[q]% / *}:- };
      } | fzf --preview-window=down:${lP}:wrap:noborder --preview='printf "%s\n" {}' | cut -d ' ' -f 1) || break;

      ((c > 0 && c <= results)) && {
        while { true } {
          clear;
          menu -m 4b -t 2b "md5: ${md5[c]}${n}Select_mirror: " ${(f)"$(nl -n ln <<< ${(F)mirror})"};
          case $(read -sek1) {
            (1) url+=($(curl -sfLH User-Agent: ${mirror[1]}${md5[c]} | pup -p 'a attr{href}' | pcre2grep 'get.+md5=.+key=.+')) && ext+=(${(L)sizeformat[c]% / *}) || read -sk1 "?${n}Try another mirror.";;
            (2) url+=($(curl -sfLH User-Agent: ${mirror[2]}${md5[c]} | pup -p 'a attr{href}' | pcre2grep "${(L)sizeformat[c]% / *}$" | nl -n ln | fzf | cut -f 2)) && ext+=(${(L)sizeformat[c]% / *}) || read -sk1 "?${n}Try another mirror.";;
            (3) read -sk1 "?${n}FIXME";; # url+=($(curl -sfLH User-Agent: ${mirror[3]}${md5[c]} | pup -p '')); ext+=(${(L)sizeformat[c]% / *});;
            (*) break;;
          };
        };
      };
    };

    ((${#url} == 0)) || printf '%s\n' 'All URLs:' ${(u)url} ${(l.COLUMNS..-.)};
    q=0;
    for n ( ${(u)url} ) {
      [[ ${n} =~ "\.${ext[++q]}$" ]] && {
        [[ ${n} =~ '\?filename=' ]] && target=${n#*=} || target=${n##*/};
        wget -O ~/Downloads/"$(uridecode ${target})" ${n};
      } || {
        wget -O ~/Downloads/$(tr -cd '[:alnum:]' < /dev/urandom | head -c 8).${ext[q]} ${n};
      };
    };
  ;;
  (4)
    typeset -i results pages lr lt li lv lp ld lP q;
    typeset -a title issue volume publisher language date issuehash serieshash url file;
    base=libgen.lc/comics/index.php\?s=${query}\&res=100\&sorted=1;
    [[ $(read -seq "?${n}Query uses wildcards [y/*]?> ") == y ]] && base+=\&mask=1; printf '\n';

    menu -m 4b -t 2b 'Search_for: ' \
      '* all FIXME' \
      '1 series' \
      '2 issues' \
      '3 files FIXME';
    case $(read -sek1 "?${n}") {
      (1) base+=\&show=1;;
      (2) base+=\&show=2;;
      (3) read -sk1 "?${n}FIXME"; quit 1;; # base+=\&show=3;;
      (*) read -sk1 "?${n}FIXME"; quit 1;; # base+=\&show=0;;
    };

    curl -sfLH User-Agent: -o ${t} ${base};
    results=$(pup -p -f ${t} 'font[size=1]:contains("results") text{}' | pcre2grep -o1 'Found.*?(\d+).*results');
    ((results > 0)) || { printf 'No results.\n'; quit };
    ((results < 101)) && pages=1 || { pages=$((results / 100)); ((results % 100 == 0)) || pages=$((pages + 1)) };

    ((pages > 2)) && [[ $(read -seq "?${results} results over ${pages} pages. Show all [y/*]? ") == n ]] && {
      read -r "q?${n}Pages to show> ";
      ((q > 0 && q <= pages)) && {
        ((q == pages)) || {
          results=$((q * 100))
          pages=${q};
        };
      } || {
        read -sk1 "${n}Invalid selection.${n}Showing first 200 results only.";
        pages=2;
        results=200;
      };
    };

    case ${(M)base%?} {
      (2)
        for p ( {1..${pages}} ) {
          issuehash+=(${(f)"$(             pup -p -f ${t} 'tbody a[href^=seriestable.php?issue_hash]  attr{href}')"});
          serieshash+=(${(f)"$(            pup -p -f ${t} 'tbody a[href^=seriestable.php?series_hash] attr{href}')"});
          title+=(${(f)"$(                 pup -p -f ${t} 'tbody a[href^=seriestable.php?series_hash] text{}')"});
          issue+=(${${(s.Issue: .)"$(      pup -p -f ${t} 'tbody td:contains("Issue: ") text{}'     | tr -d '\n')"}%Volume:*});
          volume+=(${${${(s.Volume: .)"$(  pup -p -f ${t} 'tbody td:contains("Volume: ") text{}'    | tr -d '\n')"}%% *Issue:*}});
          date+=(${(s.Year: .)"$(          pup -p -f ${t} 'tbody :contains("Year: ") text{}'        | tr -d '\n')"});
          language+=(${(s.Language: .)"$(  pup -p -f ${t} 'tbody td:contains("Language: ") text{}'  | tr -d '\n')"});
          publisher+=(${(s.Publisher: .)"$(pup -p -f ${t} 'tbody td:contains("Publisher: ") text{}' | tr -d '\n')"});
          curl -sfLH User-Agent: -o ${t} ${base}\&page=$((++q));
        };
        ;;
      (1)
        for q ( {1..${pages}} ) {
          serieshash+=(${(f)"$(            pup -p -f ${t} 'tbody a[href^=seriestable.php?series_hash] attr{href}')"});
          title+=(${(f)"$(                 pup -p -f ${t} 'tbody a[href^=seriestable.php?series_hash] text{}')"});
          issue+=(${(s.Issues: .)"$(       pup -p -f ${t} 'tbody :contains("Issues: ") text{}'      | tr -d '\n')"});
          volume+=(${(s.Volume: .)"$(      pup -p -f ${t} 'tbody :contains("Volume: ") text{}'      | tr -d '\n')"});
          date+=(${(s,Publ. Period: ,)"$(  pup -p -f ${t} 'tbody :contains("Publ. Period: ") text{}'| tr -d '\n')"});
          language+=(${(s.Language: .)"$(  pup -p -f ${t} 'tbody :contains("Language: ") text{}'    | tr -d '\n')"});
          publisher+=(${(s.Publisher: .)"$(pup -p -f ${t} 'tbody :contains("Publisher: ") text{}'   | tr -d '\n')"});
          curl -sfLH User-Agent: -o ${t} ${base}\&page=$((++q));
        };
        ;;
    };

    lr=${(c)#results};
    lt=${${(On)title//(#m)*/${#MATCH}}[1]};
    li=${${(On)issue//(#m)*/${#MATCH}}[1]};
    lv=${${(On)volume//(#m)*/${#MATCH}}[1]};
    lp=${${(On)publisher//(#m)*/${#MATCH}}[1]};
    ld=${${(On)date//(#m)*/${#MATCH}}[1]};
    # lt=$((COLUMNS - lr - 1 - 1 - lv - 1 - li - 1 - lp - 1 - 2 - 1 - ld));
    lP=$((lr + 1 + lt + 1 + lv + 1 + li + 1 + lp + 1 + 2 + 1 + ld));
    ((lP % COLUMNS == 0)) && lP=$((lP / COLUMNS)) || lP=$((lP / COLUMNS + 1));

    while { true } {
      c=$(for q ( {1..${results}} ) {
        printf "%b%.${lr}d %b%-${lt}.${lt}s %b%-${lv}.${lv}s %b%-${li}.${li}s %b%-${lp}.${lp}s %b%2.2s %b%-${ld}.${ld}s\n" \
          '\033[0m'    $q \
          '\033[37;1m' ${title[q]:- } \
          '\033[34;1m' ${volume[q]:- } \
          '\033[32;1m' ${issue[q]:- } \
          '\033[33;1m' ${publisher[q]:- } \
          '\033[35;1m' ${(U)language[q]:- } \
          '\033[31;1m' ${date[q]:- };
      } | fzf --preview-window=down:${lP}:wrap:noborder --preview='printf "%s\n" {}' | cut -d ' ' -f 1) || break;

      ((c > 0 && c <= results)) && {
        if [[ ${(M)base%?} == 1 ]] || { [[ ${(M)base%?} == 2 ]] && [[ $(read -seq "?${n}Download entire series [y/*]? ") == y ]] } {
          curl -sfLH User-Agent: -o ${t} http://libgen.lc/comics/${serieshash[c]} || break;
          q=0;
          for n ( ${(f)"$(pup -p -f ${t} 'tbody tr tr:first-child a[href^=get] attr{href}')"} ) {
            url+=(http://libgen.lc/comics/${n});
            ((++q));
          };
          typeset -Z ${(c)#${q}}; q=0;
          for n ( ${${(f)"$(pup -p -f ${t} 'tbody tr tr:first-child a[href^=get] text{}')"}%/*} ) {
            file+=("${title[c]}-${volume[c]}-${issue[c]}.$((++q)).${n}");
          };
        } elif [[ ${(M)base%?} == 2 ]] {
          curl -sfLH User-Agent: -o ${t} http://libgen.lc/comics/${issuehash[c]} || break;
          file+=("${title[c]}-${volume[c]}-${issue[c]}.${${(f)"$(pup -f ${t} 'a[href^=get] text{}')"}[1]%/*}");
          url+=(http://libgen.lc/comics/${${(f)"$(pup -f ${t} 'a[href^=get] attr{href}')"}[1]});
        };
      };
    };

    ((${#url} == 0)) || printf '%s\n' 'All URLs:' ${(u)url} ${(l.COLUMNS..-.)};
    q=0;
    for n ( ${(u)url} ) {
      wget -O ~/Downloads/"$(uridecode ${file[++q]})" ${n};
    };
  ;;
  (5)
    typeset -i pages results lr lt ls lf lS lp ln ll lP q c;
    typeset -a title format length language pubdate size url;
    base=http://libgen.lc/standarts/index.php\?s=${query};

    curl -sfLH User-Agent: -o ${t} ${base};
    results=$(pup -p -f ${t} | pcre2grep -o1 'Found.*?(\d+).*results');
    ((results > 0)) || { printf 'No results.\n'; quit };
    ((results < 26)) && pages=1 || { pages=$((results / 25)); ((results % 25 == 0)) || pages=$((pages + 1)) };

    ((pages > 4)) && [[ $(read -seq "?${results} results over ${pages} pages. Show all [y/*]? ") == n ]] && {
      read -r "q?${n}Pages to show> ";
      ((q > 0 && q <= pages)) && {
        ((q == pages)) || {
          results=$((q * 25))
          pages=${q};
        };
      } || {
        read -sk1 "${n}Invalid selection.${n}Showing first 100 results only.";
        pages=4;
        ((results >= 100 )) && results=100;
      };
    };

    for q ( {1..${pages}} ) {
      number+=(${(f)"$(  pup -p -f ${t} 'tbody tr td[width=200] b text{}')"});
      md5+=(${(f)"$(     pup -p -f ${t} 'tbody td:nth-child(2) td:nth-child(1) a text{}')"});
      format+=(${${(f)"$(pup -p -f ${t} 'tbody td:nth-child(2) td:nth-child(3) text{}')"}//Extension: (#b)(*);/${match[1]}});
      size+=($(numfmt --to=iec <<< ${(F)${(f)"$(pup -p -f ${t} 'tbody td:nth-child(2) td:nth-child(2) text{}')"}//Filesize: (#b)(+([0-9]));/${match[1]}}));
      Status+=(${(f)"$(  pup -p -f ${t} 'tbody td:nth-child(3) text{}' | pcre2grep -M -o1 'Status:\n(.*)')"});
      length+=(${(f)"$(  pup -p -f ${t} 'tbody td:nth-child(3) text{}' | pcre2grep -M -o1 'Pages:\n(.*)')"});
      language+=(${(f)"$(pup -p -f ${t} 'tbody td:nth-child(3) text{}' | pcre2grep -M -o1 'Language:\n(.*)')"});
      title+=(${(f)"$(   pup -p -f ${t} 'tbody td[width=400] text{}'   | pcre2grep -M -o1 '(.*)\nMD5:')"});
      pubdate+=(${(f)"$( pup -p -f ${t} 'tbody td:nth-child(1) tr:nth-child(3) td:nth-child(2) text{}')"});
      curl -sfLH User-Agent: -o ${t} ${base}\&page=$((++q));
    };

    lr=${(c)#results};
    lt=${${(On)title//(#m)*/${#MATCH}}[1]};
    ln=${${(On)number//(#m)*/${#MATCH}}[1]};
    lp=${${(On)pubdate//(#m)*/${#MATCH}}[1]};
    lS=${${(On)Status//(#m)*/${#MATCH}}[1]};
    ll=${${(On)length//(#m)*/${#MATCH}}[1]};
    ls=${${(On)size//(#m)*/${#MATCH}}[1]};
    lf=${${(On)format//(#m)*/${#MATCH}}[1]};

    # lt=$((COLUMNS - lr - 1 - 1 - ln - 1 - lp - 1 - lS - 1 - ll - 1 - ls - 1 - lf));
    lP=$((lr + 1 + lt + 1 + ln + 1 + lp + 1 + lS + 1 + ll + 1 + ls + 1 + lf));
    ((lP % COLUMNS == 0)) && lP=$((lP / COLUMNS)) || lP=$((lP / COLUMNS + 1));

    while { true } {
      c=$(for q ( {1..${results}} ) {
        printf "%b%.${lr}d %b%-${lt}.${lt}s %b%-${ln}.${ln}s %b%-${lp}.${lp}s %b%${lS}.${lS}s %b%${ll}.${ll}s %b%${ls}.${ls}s %b%${lf}.${lf}s\n" \
          '\033[0m'    $q \
          '\033[37;1m' ${title[q]:- } \
          '\033[34;1m' ${number[q]:- } \
          '\033[35;1m' ${pubdate[q]:- } \
          '\033[36;1m' ${Status[q]:- } \
          '\033[30;1m' ${length[q]:- } \
          '\033[33;1m' ${size[q]:- } \
          '\033[31;1m' ${format[q]:- };
      } | fzf --preview-window=down:${lP}:wrap:noborder --preview='printf "%s\n" {}' | cut -d ' ' -f 1) || break;

      ((c > 0 && c <= results)) && { url+=($(curl -sfLH User-Agent: http://libgen.lc/standarts/get.php\?md5=${md5[c]})); ext+=(${(L)format[c]}) }
    };

    ((${#url} == 0)) || printf '%s\n' 'All URLs:' ${(u)url} ${(l.COLUMNS..-.)};
    q=0;
    for n ( ${(u)url} ) {
      wget -O ~/Downloads/$(tr -cd '[:alnum:]' < /dev/urandom | head -c 8).${ext[++q]:-pdf} ${n};
    };
  ;;
  (6)
    typeset -i results pages lr lt la ls ll lP c q;
    typeset -a name url dur date lang issues issue n
    base=http://magzdb.org;


    curl -sfLH User-Agent: -o ${t} ${base}/makelist\?t=${query};
    for q ({1..${pages}}) {
      name+=(${(f)"$(pup -p -f ${t} 'body div[align=left] a text{}')"});
      url+=(${(f)"$(pup -p -f ${t} 'body div[align=left] a attr{href}')"});
      dur+=(${(f)"$(pup -p -f ${t} 'body div[align=left] i text{}')"});
      langissues+=(${(f)"$(pup -p -f ${t} 'body div[align=left]' | pcre2grep -O '$1 $2' -M '(?:\(([^()]+)\))?(?: \((\d+)\))?.*\n\s*<br>')"});

    };
  ;;
  (*) quit 1;;
};

quit;
# FULL TEXT SEARCH
# https://b-ok.cc/fulltext/
