#!/bin/zsh
[[ -t 0 ]] || return 1;
ping -c 1 1.1.1.1 &>/dev/null || return 3;
# { which zsh && which curl && which pcre2grep && which qbittorrent } &>/dev/null || return 2;
emulate -LR zsh;
setopt pipe_fail sh_glob extended_glob;
typeset base t n C;
typeset -i c q pages results lt lc lr ls ll lS ld lD rpp;
typeset -a category title magnet size date seed leech dls;
export FZF_DEFAULT_OPTS="-i +m --reverse --ansi --bind=\[:up,\':down --tiebreak=begin";
n=$'\n'; t=$(mktemp);
# query="${${@}:-$(read -er "?${n}> ")}";
[[ ${query::=${${@}:-$(read -er "?${n}> ")}} =~ '^\s*$' ]] && query= || {
  query=${(j..)${(s..)query}/(#b)([^A-Za-z0-9-_.~])/%${(l:2::0:)$(([##16]#match))}};
}

base=https://nyaa.si/;
quit () { rm -f ${t}; exit ${1:-0} };
menu () {
  typeset m t a;
  while { getopts 'm:t:' a } { case $a {
    (m) 
      m='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
    (t)
      t='\033[0;'$(printf '%s' ${OPTARG} | perl -pe 's/([0-7])/3$1;/g; s/i/7;/gi; s/b/1;/gi; s/;$//')m;;
  }; };
  for a ( ${@[OPTIND,-1]} ) { printf '\t%b%s\t\t%b%s%b\n' ${m:-\\033\[0m} ${a%% *} ${t:-\\033\[0m} "${a#* }" '\033[0m' };
}

menu -m 4b -t 2b 'Filter: ' \
  '1 No remakes' \
  '2 Trusted only' \
  '* No filter';
read -sk1 "C?${n}";
case ${C} {
  ([1-2]) base+=\?f=${C};;
  (*) base+=\?f=0;;
};

base+=\&q=${query};

menu -m 4b -t 2b  'Category: ' \
  '1 Anime' \
  '2 Audio' \
  '3 Literature' \
  '4 Live Action' \
  '5 Pictures' \
  '6 Software' \
  '* Any';
read -sk1 "C?${n}";
case ${C} {
  ([1-6]) base+=\&c=${C};;
  (*) base+=\&c=0_0;;
};

case ${(M)base%?} {
  (1)
    menu -m 4b -t 2b 'Anime_sub-category: ' \
      '1 Anime Music Video' \
      '2 English-translated' \
      '3 Non-English-translated' \
      '4 Raw' \
      '* Any';
    read -sk1 "C?${n}";
    case ${C} {
      ([1-4]) base+=_${C};;
      (*) base+=_0;;
    };;
  (2)
    menu -m 4b -t 2b 'Audio_sub-category: ' \
      '1 Lossless' \
      '2 Lossy' \
      '* Any';
    read -sk1 "C?${n}";
    case ${C} {
      ([1-2]) base+=_${C};;
      (*) base+=_0;;
    };;
  (3)
    menu -m 4b -t 2b 'Literature_sub-category: ' \
      '1 English-translated' \
      '2 Non-English-translated' \
      '3 Raw' \
      '* Any';
    read -sk1 "C?${n}";
    case ${C} {
      ([1-3]) base+=_${C};;
      (*) base+=_0;;
    };;
  (4)
    menu -m 4b -t 2b 'Live action_sub-category: ' \
      '1 English-translated' \
      '2 Idol/Promotional Video' \
      '3 Non-English-translated' \
      '4 Raw ' \
      '* Any';
    read -sk1 "C?${n}";
    case ${C} {
      ([1-4]) base+=_${C};;
      (*) base+=_0;;
    };;
  (5)
    menu -m 4b -t 2b 'Pictures_sub-category: ' \
      '1 Graphics' \
      '2 Photos' \
      '* Any';
    read -sk1 "C?${n}";
    case ${C} {
      ([1-2]) base+=_${C};;
      (*) base+=_0;;
    };;
  (6)
    menu -m 4b -t 2b 'Software_sub-category: ' \
      '1 Applications' \
      '2 Games' \
      '* Any';
    read -sk1 "C?${n}";
    case ${C} {
      ([1-2]) base+=_${C};;
      (*) base+=_0;;
    };;
};

menu -m 4b -t 2b 'Sort_by: ' \
  '1 Size' \
  '2 Seeds' \
  '3 Leeches' \
  '4 Downloads' \
  '* Date';
read -sk1 "C?${n}";
case ${C} {
  (1) base+=\&s=size;;
  (2) base+=\&s=seeders;;
  (3) base+=\&s=leechers;;
  (4) base+=\&s=downloads;;
  (*) base+=\&s=id;;
};

menu -m 4b -t 2b 'Sort_order: ' \
  '1 Ascending' \
  '* Descending'; 
read -sk1 "C?${n}";
case ${C} {
  (1) base+=\&o=asc;;
  (*) base+=\&o=desc;;
};

rpp=75; # results per page
curl -sfLH User-Agent: -o ${t} ${base};
if [[ -n ${query} ]] {
  if [[ $(pup -p -f ${t} 'h3 text{}') != 'No results found' ]] {
    results=$(pup -p -f ${t} 'div.pagination-page-info' | pcre2grep -o1 '\b(\d+)\b result');
    pages=$((results / rpp));
    ((results % rpp != 0 || results < rpp)) && pages+=1;
    ((pages > 5)) && [[ $(read -seq "?${n}${results} results over ${pages} pages, show all [y/*]?") == n ]] && {
      read -r "C?${n}Input number of pages to display> ";
      ((C > 0 && C <= pages)) && {
        ((C == pages)) || results=$((C * rpp));
        pages=${C};
      } || { 
        printf 'Invalid selection; showing first 5 pages only.\n'; ((pages == 5)) || results=$((5 * rpp)); pages=5;
      };
    };
  } else {
    printf 'No results.\n'; quit;
  };
} else {
  read -r "C?${n}Input number of pages to display> ";
  ((C > 0)) && {
    pages=${C}; results=$((pages * rpp));
  } || {
    printf 'Invalid selection; showing first 5 pages only.\n';
    pages=5; results=$((pages * rpp));
  };
};

for q ( {1..${pages}} ) {
  category+=(${(f)"$(pup -p -f ${t} 'tr td:nth-child(1) img attr{alt}')"});
  title+=(${(f)"$(   pup -p -f ${t} 'tr td:nth-child(2) text{}' | perl -pe 'BEGIN {undef $/} s/\d+\n//g; s/\n\s*/\n/g')"});
  magnet+=(${(f)"$(  pup -p -f ${t} 'tr td:nth-child(3) a:nth-child(2) attr{href}')"});
  size+=(${(f)"$(    pup -p -f ${t} 'tr td:nth-child(4) text{}')"});
  date+=(${(f)"$(    pup -p -f ${t} 'tr td:nth-child(5) text{}')"});
  seed+=(${(f)"$(    pup -p -f ${t} 'tr td:nth-child(6) text{}')"});
  leech+=(${(f)"$(   pup -p -f ${t} 'tr td:nth-child(7) text{}')"});
  dls+=(${(f)"$(     pup -p -f ${t} 'tr td:nth-child(8) text{}')"});
  curl -sfLH User-Agent: -o ${t} ${base}\&p=$((q+1));
};

lr=${(c)#${results}};
ls=${(c)#${${(nO)seed}[1]}};
ll=${(c)#${${(nO)leech}[1]}};
ld=${(c)#${${(nO)dls}[1]}};
lD=16;
lS=10;
lt=$((COLUMNS - lr - 1 - 1 - lc - 1 - lS - 1 - ls - 1 - ll - 1 - lD - 1 - ld - 3));

while { true } {
  c=$(for q ( {1..${results}} ) {
    printf "%b%.${lr}d %b%-${lt}.${lt}s %b%-${lc}.${lc}s %b%${lS}.${lS}s %b%.${ls}d%b/%b%.${ll}d %b%${ld}.${ld}s %b%${lD}.${lD}s\n" \
      '\033[0m'    $q \
      '\033[1m'    ${title[q]:- } \
      '\033[33;1m' ${category[q]:- } \
      '\033[34;1m' ${size[q]:- } \
      '\033[32;1m' ${seed[q]:- } \
      '\033[37;1m' \
      '\033[31;1m' ${leech[q]:- } \
      '\033[35;1m' ${dls[q]:- } \
      '\033[36;1m' ${date[q]:- };
  } | fzf | cut -f 1 -d ' ') || break;
  ((c > 0 && c <= ${results})) && {
    { qbittorrent ${magnet[c]} & disown } &>/dev/null;
    # printf '%s\n' d10:magnet-uri${#${magnet[c]}}:${magnet[c]}e > ~/Downloads/rtorrent/watch/start/meta-${${magnet[c]%%&*}##*:}.torrent;
  };
};

quit;
